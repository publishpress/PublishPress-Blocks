{"version":3,"file":"custom-styles.js","mappings":"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","sources":["webpack://advanced-gutenberg/./assets/blocks/customstyles/custom-styles.jsx"],"sourcesContent":["(function ( wpI18n, wpHooks, wpBlocks, wpBlockEditor, wpComponents, wpCompose ) {\r\n    wpBlockEditor = wp.blockEditor || wp.editor;\r\n    const { addFilter } = wpHooks;\r\n    const { __ } = wpI18n;\r\n    const { hasBlockSupport } = wpBlocks;\r\n    const { InspectorControls } = wpBlockEditor;\r\n    const { SelectControl } = wpComponents;\r\n    const { createHigherOrderComponent } = wpCompose;\r\n\r\n    const SUPPORTED_BLOCKS = [\r\n        'core/paragraph',\r\n        'core/heading',\r\n        'core/list',\r\n        'core/code',\r\n        'core/preformatted',\r\n        'core/table',\r\n        'core/columns',\r\n        'core/column',\r\n        'core/group',\r\n        'core/image',\r\n    ];\r\n\r\n\r\n    // Register custom styles to blocks attributes\r\n    addFilter( 'blocks.registerBlockType', 'advgb/registerCustomStyleClass', function ( settings ) {\r\n        if (SUPPORTED_BLOCKS.includes( settings.name )) {\r\n            settings.attributes = Object.assign( settings.attributes, {\r\n                customStyle: {\r\n                    type: 'string'\r\n                },\r\n                identifyColor: {\r\n                    type: 'string'\r\n                }\r\n            } );\r\n        }\r\n\r\n        return settings;\r\n    } );\r\n\r\n    // Add option to return to default style\r\n    if (typeof advgbBlocks.customStyles !== 'undefined' && advgbBlocks.customStyles) {\r\n        advgbBlocks.customStyles.unshift( {\r\n            id: 0,\r\n            label: __( 'Select a block style', 'advanced-gutenberg' ),\r\n            value: '',\r\n            identifyColor: ''\r\n        } );\r\n    }\r\n\r\n    // Add option to select custom styles for supported blocks\r\n    addFilter( 'editor.BlockEdit', 'advgb/customStyles', function ( BlockEdit ) {\r\n        return ( props ) => {\r\n            return ( [\r\n                <BlockEdit key=\"block-edit-custom-class-name\" {...props} />,\r\n                props.isSelected && SUPPORTED_BLOCKS.includes( props.name ) &&\r\n                <InspectorControls key=\"advgb-custom-controls\">\r\n                    <div className=\"advgb-custom-styles-wrapper\">\r\n                        <SelectControl\r\n                            label={ [\r\n                                __( 'Block styles', 'advanced-gutenberg' ),\r\n                                <span className={'components-panel__color-area'}\r\n                                      key=\"customstyle-identify\"\r\n                                      style={ {\r\n                                          background: props.attributes.identifyColor,\r\n                                          verticalAlign: 'text-bottom',\r\n                                          borderRadius: '50%',\r\n                                          border: 'none',\r\n                                          width: '16px',\r\n                                          height: '16px',\r\n                                          display: 'inline-block',\r\n                                          marginLeft: '10px',\r\n                                      } } />\r\n                            ] }\r\n                            help={__( 'This option let you add custom style for the current block', 'advanced-gutenberg' )}\r\n                            value={props.attributes.customStyle}\r\n                            options={advgbBlocks.customStyles.map( ( cstyle, index ) => {\r\n                                if (cstyle.title) advgbBlocks.customStyles[ index ].label = cstyle.title;\r\n                                if (cstyle.name) advgbBlocks.customStyles[ index ].value = cstyle.name;\r\n\r\n                                return cstyle;\r\n                            } )}\r\n                            onChange={( cstyle ) => {\r\n                                const { identifyColor } = advgbBlocks.customStyles.filter( ( style ) => style.value === cstyle )[0];\r\n                                props.setAttributes( {\r\n                                    customStyle: cstyle,\r\n                                    identifyColor: identifyColor,\r\n                                    backgroundColor: undefined,\r\n                                    textColor: undefined,\r\n                                    fontSize: undefined,\r\n                                } );\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </InspectorControls>\r\n            ] )\r\n        }\r\n    } );\r\n\r\n    // Apply custom styles on front-end\r\n    addFilter( 'blocks.getSaveContent.extraProps', 'advgb/loadFrontendCustomStyles', function ( extraProps, blockType, attributes ) {\r\n        if (hasBlockSupport( blockType, 'customStyle', true ) && attributes.customStyle && typeof attributes.customStyle !== 'undefined') {\r\n            if (typeof extraProps.className === 'undefined') {\r\n                extraProps.className = attributes.customStyle;\r\n            } else {\r\n                extraProps.className += ' ' + attributes.customStyle;\r\n                extraProps.className = extraProps.className.trim();\r\n            }\r\n        }\r\n\r\n        return extraProps;\r\n    } );\r\n\r\n\r\n    const withStyleClasses = createHigherOrderComponent( ( BlockListBlock ) => {\r\n        return ( props ) => {\r\n            if ( ! SUPPORTED_BLOCKS.includes( props.name ) || !hasBlockSupport( props.name, 'customStyle', true ) ) {\r\n                return <BlockListBlock { ...props } />\r\n            }\r\n\r\n            const {\r\n                customStyle,\r\n            } = props.attributes;\r\n\r\n            if (customStyle && typeof customStyle !== 'undefined') {\r\n                return <BlockListBlock { ...props } className={ `${ customStyle }` } />;\r\n            } else {\r\n                return <BlockListBlock { ...props } />\r\n            }\r\n        };\r\n    }, 'withStyleClasses' );\r\n\r\n    // Apply custom styles on back-end\r\n    wp.hooks.addFilter( 'editor.BlockListBlock', 'advgb/loadBackendCustomStyles', withStyleClasses );\r\n\r\n})( wp.i18n, wp.hooks, wp.blocks, wp.blockEditor, wp.components, wp.compose );\r\n"],"names":["wpI18n","wpHooks","wpBlocks","wpBlockEditor","wpComponents","wpCompose","wp","blockEditor","editor","addFilter","__","hasBlockSupport","InspectorControls","SelectControl","createHigherOrderComponent","SUPPORTED_BLOCKS","settings","includes","name","attributes","_extends","customStyle","type","identifyColor","advgbBlocks","customStyles","unshift","id","label","value","BlockEdit","props","React","createElement","key","isSelected","className","style","background","verticalAlign","borderRadius","border","width","height","display","marginLeft","help","options","map","cstyle","index","title","onChange","filter","setAttributes","backgroundColor","undefined","textColor","fontSize","extraProps","blockType","trim","withStyleClasses","BlockListBlock","concat","hooks","i18n","blocks","components","compose"],"sourceRoot":""}