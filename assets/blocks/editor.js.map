{"version":3,"file":"editor.js","mappings":"4OAAkB,oBAAPA,SAA6C,IAAhBA,GAAGC,UACvCD,GAAGC,UAAS,WAER,GAA8C,cAA3CC,kBAAkBC,OAAOC,eAAmF,IAAlDF,kBAAkBC,OAAOC,cAAcC,OAApG,CAKA,IAAIC,EAA0B,UACW,IAA9BC,OAAOC,qBACdF,EAA0BC,OAAOC,oBAGL,OAA5BF,GAEAA,EAAwBG,MAAK,WACzB,IAA8D,IAA1DP,kBAAkBQ,kBAAkBC,kBAAxC,CAKA,IAAIC,EAAc,GACdC,EAAiB,GACjBC,GAAgB,EAEhBX,EAASH,GAAGG,OAAOY,gBACjBC,EAAc,CAChBZ,cAAea,OAAOC,OAAOhB,kBAAkBC,OAAOC,eACtDe,gBAAiBF,OAAOC,OAAOhB,kBAAkBC,OAAOgB,kBAG5D,IAAK,IAAIC,KAASjB,EAAQ,CACtB,IAAIkB,EAAgB,GAChBC,EAAY,CACZC,KAAMpB,EAAOiB,GAAOG,KACpBC,KAAMrB,EAAOiB,GAAOI,KAAKC,IACzBC,MAAOvB,EAAOiB,GAAOM,MACrBC,SAAUxB,EAAOiB,GAAOO,SACxBC,OAAQzB,EAAOiB,GAAOQ,QAGtBC,EAAc1B,EAAOiB,GAAOI,KAAKC,IAAMtB,EAAOiB,GAAOI,KAAKC,IAAMtB,EAAOiB,GAAOI,UAE5CM,IAAlC3B,EAAOiB,GAAOI,KAAKO,aAA0BT,EAAUU,UAAY7B,EAAOiB,GAAOI,KAAKO,YAEjE,mBAAdF,OAC2B,IAAxBA,EAAUI,WAChBX,EAAUE,KAAOxB,GAAGkC,QAAQC,eAAenC,GAAGkC,QAAQE,cAAcP,IACpEP,EAAUE,KAAOF,EAAUE,KAAKa,QAAQ,aAAc,cACtDf,EAAUE,KAAOF,EAAUE,KAAKa,QAAQ,eAAgB,kBAExDhB,EAAgBrB,GAAGkC,QAAQE,cAAcpC,GAAGsC,WAAWC,SAAU,CAACf,KAAM,kBACxEF,EAAUE,KAAOxB,GAAGkC,QAAQC,eAAed,IAEnB,WAArBmB,EAAOX,IACdP,EAAUE,KAAOxB,GAAGkC,QAAQC,eAAeN,GAC3CP,EAAUE,KAAOF,EAAUE,KAAKa,QAAQ,aAAc,cACtDf,EAAUE,KAAOF,EAAUE,KAAKa,QAAQ,eAAgB,iBAC5B,iBAAdR,IACdR,EAAgBrB,GAAGkC,QAAQE,cAAcpC,GAAGsC,WAAWC,SAAU,CAACf,KAAMK,IACxEP,EAAUE,KAAOxB,GAAGkC,QAAQC,eAAed,IAE/CT,EAAY6B,KAAKnB,GAIbN,EAAYZ,cAAcsC,QAAQvC,EAAOiB,GAAOG,OAAS,EAEzDV,EAAe4B,KAAKtC,EAAOiB,GAAOG,MAC3BP,EAAYG,gBAAgBuB,QAAQvC,EAAOiB,GAAOG,OAAS,IAIlEV,EAAe4B,KAAKtC,EAAOiB,GAAOG,MAClCT,GAAgB,EAExB,CAEA,GAAIA,EAAe,MACCgB,IAAZa,cAA2Cb,IAAlBa,QAAQC,OAEjCD,QAAQE,IAAI,kDAMhBC,YAAY,WACR9C,GAAG+C,KAAKC,SAAS,eAAeC,qBAAqB,CACjDtC,kBAAmBE,GAE3B,GAAG,KAEH,IAAIqC,EAAkBlD,GAAGG,OAAOgD,gBAEhC,IAEIC,OAAOC,KAAK,CACRC,IAAKpD,kBAAkBqD,QACvBC,OAAQ,OACRT,KAAM,CACFU,OAAQ,2BACRC,WAAYC,KAAKC,UAAUhD,GAC3BiD,eAAgBF,KAAKC,UAAUV,GAC/BY,MAAO5D,kBAAkB4D,OAE7BC,QAAS,SAAUhB,GACf,GAGZ,CAAE,MAAOiB,GACL,CAER,CA9FA,CA+FJ,GA5GJ,CA8GJ,G","sources":["webpack://advanced-gutenberg/./assets/js/editor.jsx"],"sourcesContent":["if (typeof wp !== 'undefined' && typeof wp.domReady !== 'undefined'){\r\n    wp.domReady(()=>{\r\n\r\n        if(advgb_blocks_vars.blocks.active_blocks === 'undefined' || advgb_blocks_vars.blocks.active_blocks.length === 0) {\r\n            // No Block Access defined for this role, so we stop the process here\r\n            return;\r\n        }\r\n\r\n        let gutenberg_init_function = null;\r\n        if (typeof window._wpLoadBlockEditor !== 'undefined') {\r\n            gutenberg_init_function = window._wpLoadBlockEditor;\r\n        }\r\n\r\n        if (gutenberg_init_function !== null) {\r\n            // Wait for Gutenberg editor to be ready\r\n            gutenberg_init_function.then(() => {\r\n                if (advgb_blocks_vars.original_settings.allowedBlockTypes !== true) {\r\n                    // allowed_block_types filter has been used, in this case we do nothing as we don't know why blocks have been filtered\r\n                    return;\r\n                }\r\n\r\n                let list_blocks = [];\r\n                let granted_blocks = [];\r\n                let missing_block = false;\r\n                // Retrieve all registered blocks\r\n                let blocks = wp.blocks.getBlockTypes();\r\n                const savedBlocks = {\r\n                    active_blocks: Object.values(advgb_blocks_vars.blocks.active_blocks),\r\n                    inactive_blocks: Object.values(advgb_blocks_vars.blocks.inactive_blocks),\r\n                };\r\n\r\n                for (let block in blocks) {\r\n                    var blockItemIcon = '';\r\n                    var blockItem = {\r\n                        name: blocks[block].name,\r\n                        icon: blocks[block].icon.src,\r\n                        title: blocks[block].title,\r\n                        category: blocks[block].category,\r\n                        parent: blocks[block].parent\r\n                    };\r\n\r\n                    var savedIcon = !!blocks[block].icon.src ? blocks[block].icon.src : blocks[block].icon;\r\n\r\n                    if (blocks[block].icon.foreground !== undefined) blockItem.iconColor = blocks[block].icon.foreground;\r\n\r\n                    if (typeof savedIcon === 'function') {\r\n                        if(typeof savedIcon.prototype !== 'undefined') {\r\n                            blockItem.icon = wp.element.renderToString(wp.element.createElement(savedIcon));\r\n                            blockItem.icon = blockItem.icon.replace(/stopcolor/g, 'stop-color');\r\n                            blockItem.icon = blockItem.icon.replace(/stopopacity/g, 'stop-opacity');\r\n                        } else {\r\n                            blockItemIcon = wp.element.createElement(wp.components.Dashicon, {icon: 'block-default'});\r\n                            blockItem.icon = wp.element.renderToString(blockItemIcon);\r\n                        }\r\n                    } else if (typeof savedIcon === 'object') {\r\n                        blockItem.icon = wp.element.renderToString(savedIcon);\r\n                        blockItem.icon = blockItem.icon.replace(/stopcolor/g, 'stop-color');\r\n                        blockItem.icon = blockItem.icon.replace(/stopopacity/g, 'stop-opacity');\r\n                    } else if (typeof savedIcon === 'string') {\r\n                        blockItemIcon = wp.element.createElement(wp.components.Dashicon, {icon: savedIcon});\r\n                        blockItem.icon = wp.element.renderToString(blockItemIcon);\r\n                    }\r\n                    list_blocks.push(blockItem);\r\n\r\n\r\n                    // Compare current block with the list of blocks we have\r\n                    if (savedBlocks.active_blocks.indexOf(blocks[block].name) >= 0) {\r\n                        // Block is active\r\n                        granted_blocks.push(blocks[block].name);\r\n                    } else if (savedBlocks.inactive_blocks.indexOf(blocks[block].name) >= 0) {\r\n                        // Block is inactive\r\n                    } else {\r\n                        // This block is not in our database yet, but by default we allow the usage\r\n                        granted_blocks.push(blocks[block].name);\r\n                        missing_block = true;\r\n                    }\r\n                }\r\n\r\n                if (missing_block) {\r\n                    if (console !== undefined && console.error !== undefined) {\r\n                        // Let's output as log instead of error\r\n                        console.log('Reloading editor by PublishPress Blocks plugin');\r\n                    }\r\n\r\n                    /* It seems the best approach to update editor settings, however is overriden\r\n                     * https://github.com/WordPress/gutenberg/issues/15993#issuecomment-1487007071\r\n                     * We're adding 3 seconds delay to bypass the override */\r\n                    setTimeout( function() {\r\n                        wp.data.dispatch('core/editor').updateEditorSettings({\r\n                            allowedBlockTypes: granted_blocks\r\n                        });\r\n                    }, 3000 );\r\n\r\n                    var list_categories = wp.blocks.getCategories();\r\n\r\n                    try {\r\n                        // Use this ajax query to update the block list in db\r\n                        jQuery.ajax({\r\n                            url: advgb_blocks_vars.ajaxurl,\r\n                            method: 'POST',\r\n                            data: {\r\n                                action: 'advgb_update_blocks_list',\r\n                                blocksList: JSON.stringify(list_blocks),\r\n                                categoriesList: JSON.stringify(list_categories),\r\n                                nonce: advgb_blocks_vars.nonce\r\n                            },\r\n                            success: function (data) {\r\n                                //console.log(data);\r\n                            }\r\n                        });\r\n                    } catch (e) {\r\n                        //console.log(e);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n}\r\n"],"names":["wp","domReady","advgb_blocks_vars","blocks","active_blocks","length","gutenberg_init_function","window","_wpLoadBlockEditor","then","original_settings","allowedBlockTypes","list_blocks","granted_blocks","missing_block","getBlockTypes","savedBlocks","Object","values","inactive_blocks","block","blockItemIcon","blockItem","name","icon","src","title","category","parent","savedIcon","undefined","foreground","iconColor","prototype","element","renderToString","createElement","replace","components","Dashicon","_typeof","push","indexOf","console","error","log","setTimeout","data","dispatch","updateEditorSettings","list_categories","getCategories","jQuery","ajax","url","ajaxurl","method","action","blocksList","JSON","stringify","categoriesList","nonce","success","e"],"sourceRoot":""}