{"version":3,"file":"block-usage.js","mappings":";gkFACAA,EAAA,kBAAAC,CAAA,MAAAC,EAAAD,EAAA,GAAAE,EAAAC,OAAAC,UAAAC,EAAAH,EAAAI,eAAAC,EAAAJ,OAAAK,gBAAA,SAAAP,EAAAD,EAAAE,GAAAD,EAAAD,GAAAE,EAAAO,KAAA,EAAAC,EAAA,mBAAAC,OAAAA,OAAA,GAAAC,EAAAF,EAAAG,UAAA,aAAAC,EAAAJ,EAAAK,eAAA,kBAAAC,EAAAN,EAAAO,aAAA,yBAAAC,EAAAjB,EAAAD,EAAAE,GAAA,OAAAC,OAAAK,eAAAP,EAAAD,EAAA,CAAAS,MAAAP,EAAAiB,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAApB,EAAAD,EAAA,KAAAkB,EAAA,aAAAjB,GAAAiB,EAAA,SAAAjB,EAAAD,EAAAE,GAAA,OAAAD,EAAAD,GAAAE,CAAA,WAAAoB,EAAArB,EAAAD,EAAAE,EAAAG,GAAA,IAAAK,EAAAV,GAAAA,EAAAI,qBAAAmB,EAAAvB,EAAAuB,EAAAX,EAAAT,OAAAqB,OAAAd,EAAAN,WAAAU,EAAA,IAAAW,EAAApB,GAAA,WAAAE,EAAAK,EAAA,WAAAH,MAAAiB,EAAAzB,EAAAC,EAAAY,KAAAF,CAAA,UAAAe,EAAA1B,EAAAD,EAAAE,GAAA,WAAA0B,KAAA,SAAAC,IAAA5B,EAAA6B,KAAA9B,EAAAE,GAAA,OAAAD,GAAA,OAAA2B,KAAA,QAAAC,IAAA5B,EAAA,EAAAD,EAAAsB,KAAAA,EAAA,IAAAS,EAAA,iBAAAC,EAAA,iBAAAC,EAAA,YAAAC,EAAA,YAAAC,EAAA,YAAAZ,IAAA,UAAAa,IAAA,UAAAC,IAAA,KAAAC,EAAA,GAAApB,EAAAoB,EAAA1B,GAAA,8BAAA2B,EAAApC,OAAAqC,eAAAC,EAAAF,GAAAA,EAAAA,EAAAG,EAAA,MAAAD,GAAAA,IAAAvC,GAAAG,EAAAyB,KAAAW,EAAA7B,KAAA0B,EAAAG,GAAA,IAAAE,EAAAN,EAAAjC,UAAAmB,EAAAnB,UAAAD,OAAAqB,OAAAc,GAAA,SAAAM,EAAA3C,GAAA,0BAAA4C,SAAA,SAAA7C,GAAAkB,EAAAjB,EAAAD,GAAA,SAAAC,GAAA,YAAA6C,QAAA9C,EAAAC,EAAA,gBAAA8C,EAAA9C,EAAAD,GAAA,SAAAgD,EAAA9C,EAAAK,EAAAG,EAAAE,GAAA,IAAAE,EAAAa,EAAA1B,EAAAC,GAAAD,EAAAM,GAAA,aAAAO,EAAAc,KAAA,KAAAZ,EAAAF,EAAAe,IAAAE,EAAAf,EAAAP,MAAA,OAAAsB,GAAA,UAAAkB,EAAAlB,IAAA1B,EAAAyB,KAAAC,EAAA,WAAA/B,EAAAkD,QAAAnB,EAAAoB,SAAAC,MAAA,SAAAnD,GAAA+C,EAAA,OAAA/C,EAAAS,EAAAE,EAAA,aAAAX,GAAA+C,EAAA,QAAA/C,EAAAS,EAAAE,EAAA,IAAAZ,EAAAkD,QAAAnB,GAAAqB,MAAA,SAAAnD,GAAAe,EAAAP,MAAAR,EAAAS,EAAAM,EAAA,aAAAf,GAAA,OAAA+C,EAAA,QAAA/C,EAAAS,EAAAE,EAAA,IAAAA,EAAAE,EAAAe,IAAA,KAAA3B,EAAAK,EAAA,gBAAAE,MAAA,SAAAR,EAAAI,GAAA,SAAAgD,IAAA,WAAArD,GAAA,SAAAA,EAAAE,GAAA8C,EAAA/C,EAAAI,EAAAL,EAAAE,EAAA,WAAAA,EAAAA,EAAAA,EAAAkD,KAAAC,EAAAA,GAAAA,GAAA,aAAA3B,EAAA1B,EAAAE,EAAAG,GAAA,IAAAE,EAAAwB,EAAA,gBAAArB,EAAAE,GAAA,GAAAL,IAAA0B,EAAA,MAAAqB,MAAA,mCAAA/C,IAAA2B,EAAA,cAAAxB,EAAA,MAAAE,EAAA,OAAAH,MAAAR,EAAAsD,MAAA,OAAAlD,EAAAmD,OAAA9C,EAAAL,EAAAwB,IAAAjB,IAAA,KAAAE,EAAAT,EAAAoD,SAAA,GAAA3C,EAAA,KAAAE,EAAA0C,EAAA5C,EAAAT,GAAA,GAAAW,EAAA,IAAAA,IAAAmB,EAAA,gBAAAnB,CAAA,cAAAX,EAAAmD,OAAAnD,EAAAsD,KAAAtD,EAAAuD,MAAAvD,EAAAwB,SAAA,aAAAxB,EAAAmD,OAAA,IAAAjD,IAAAwB,EAAA,MAAAxB,EAAA2B,EAAA7B,EAAAwB,IAAAxB,EAAAwD,kBAAAxD,EAAAwB,IAAA,gBAAAxB,EAAAmD,QAAAnD,EAAAyD,OAAA,SAAAzD,EAAAwB,KAAAtB,EAAA0B,EAAA,IAAAK,EAAAX,EAAA3B,EAAAE,EAAAG,GAAA,cAAAiC,EAAAV,KAAA,IAAArB,EAAAF,EAAAkD,KAAArB,EAAAF,EAAAM,EAAAT,MAAAM,EAAA,gBAAA1B,MAAA6B,EAAAT,IAAA0B,KAAAlD,EAAAkD,KAAA,WAAAjB,EAAAV,OAAArB,EAAA2B,EAAA7B,EAAAmD,OAAA,QAAAnD,EAAAwB,IAAAS,EAAAT,IAAA,YAAA6B,EAAA1D,EAAAE,GAAA,IAAAG,EAAAH,EAAAsD,OAAAjD,EAAAP,EAAAa,SAAAR,GAAA,GAAAE,IAAAN,EAAA,OAAAC,EAAAuD,SAAA,eAAApD,GAAAL,EAAAa,SAAAkD,SAAA7D,EAAAsD,OAAA,SAAAtD,EAAA2B,IAAA5B,EAAAyD,EAAA1D,EAAAE,GAAA,UAAAA,EAAAsD,SAAA,WAAAnD,IAAAH,EAAAsD,OAAA,QAAAtD,EAAA2B,IAAA,IAAAmC,UAAA,oCAAA3D,EAAA,aAAA8B,EAAA,IAAAzB,EAAAiB,EAAApB,EAAAP,EAAAa,SAAAX,EAAA2B,KAAA,aAAAnB,EAAAkB,KAAA,OAAA1B,EAAAsD,OAAA,QAAAtD,EAAA2B,IAAAnB,EAAAmB,IAAA3B,EAAAuD,SAAA,KAAAtB,EAAA,IAAAvB,EAAAF,EAAAmB,IAAA,OAAAjB,EAAAA,EAAA2C,MAAArD,EAAAF,EAAAiE,YAAArD,EAAAH,MAAAP,EAAAgE,KAAAlE,EAAAmE,QAAA,WAAAjE,EAAAsD,SAAAtD,EAAAsD,OAAA,OAAAtD,EAAA2B,IAAA5B,GAAAC,EAAAuD,SAAA,KAAAtB,GAAAvB,GAAAV,EAAAsD,OAAA,QAAAtD,EAAA2B,IAAA,IAAAmC,UAAA,oCAAA9D,EAAAuD,SAAA,KAAAtB,EAAA,UAAAiC,EAAAnE,GAAA,IAAAD,EAAA,CAAAqE,OAAApE,EAAA,SAAAA,IAAAD,EAAAsE,SAAArE,EAAA,SAAAA,IAAAD,EAAAuE,WAAAtE,EAAA,GAAAD,EAAAwE,SAAAvE,EAAA,SAAAwE,WAAAC,KAAA1E,EAAA,UAAA2E,EAAA1E,GAAA,IAAAD,EAAAC,EAAA2E,YAAA,GAAA5E,EAAA4B,KAAA,gBAAA5B,EAAA6B,IAAA5B,EAAA2E,WAAA5E,CAAA,UAAAyB,EAAAxB,GAAA,KAAAwE,WAAA,EAAAJ,OAAA,SAAApE,EAAA4C,QAAAuB,EAAA,WAAAS,OAAA,YAAAnC,EAAA1C,GAAA,GAAAA,GAAA,KAAAA,EAAA,KAAAE,EAAAF,EAAAY,GAAA,GAAAV,EAAA,OAAAA,EAAA4B,KAAA9B,GAAA,sBAAAA,EAAAkE,KAAA,OAAAlE,EAAA,IAAA8E,MAAA9E,EAAA+E,QAAA,KAAAxE,GAAA,EAAAG,EAAA,SAAAwD,IAAA,OAAA3D,EAAAP,EAAA+E,QAAA,GAAA1E,EAAAyB,KAAA9B,EAAAO,GAAA,OAAA2D,EAAAzD,MAAAT,EAAAO,GAAA2D,EAAAX,MAAA,EAAAW,EAAA,OAAAA,EAAAzD,MAAAR,EAAAiE,EAAAX,MAAA,EAAAW,CAAA,SAAAxD,EAAAwD,KAAAxD,CAAA,YAAAsD,UAAAf,EAAAjD,GAAA,2BAAAoC,EAAAhC,UAAAiC,EAAA9B,EAAAoC,EAAA,eAAAlC,MAAA4B,EAAAjB,cAAA,IAAAb,EAAA8B,EAAA,eAAA5B,MAAA2B,EAAAhB,cAAA,IAAAgB,EAAA4C,YAAA9D,EAAAmB,EAAArB,EAAA,qBAAAhB,EAAAiF,oBAAA,SAAAhF,GAAA,IAAAD,EAAA,mBAAAC,GAAAA,EAAAiF,YAAA,QAAAlF,IAAAA,IAAAoC,GAAA,uBAAApC,EAAAgF,aAAAhF,EAAAmF,MAAA,EAAAnF,EAAAoF,KAAA,SAAAnF,GAAA,OAAAE,OAAAkF,eAAAlF,OAAAkF,eAAApF,EAAAoC,IAAApC,EAAAqF,UAAAjD,EAAAnB,EAAAjB,EAAAe,EAAA,sBAAAf,EAAAG,UAAAD,OAAAqB,OAAAmB,GAAA1C,CAAA,EAAAD,EAAAuF,MAAA,SAAAtF,GAAA,OAAAkD,QAAAlD,EAAA,EAAA2C,EAAAG,EAAA3C,WAAAc,EAAA6B,EAAA3C,UAAAU,GAAA,0BAAAd,EAAA+C,cAAAA,EAAA/C,EAAAwF,MAAA,SAAAvF,EAAAC,EAAAG,EAAAE,EAAAG,QAAA,IAAAA,IAAAA,EAAA+E,SAAA,IAAA7E,EAAA,IAAAmC,EAAAzB,EAAArB,EAAAC,EAAAG,EAAAE,GAAAG,GAAA,OAAAV,EAAAiF,oBAAA/E,GAAAU,EAAAA,EAAAsD,OAAAd,MAAA,SAAAnD,GAAA,OAAAA,EAAAsD,KAAAtD,EAAAQ,MAAAG,EAAAsD,MAAA,KAAAtB,EAAAD,GAAAzB,EAAAyB,EAAA3B,EAAA,aAAAE,EAAAyB,EAAA/B,GAAA,0BAAAM,EAAAyB,EAAA,qDAAA3C,EAAA0F,KAAA,SAAAzF,GAAA,IAAAD,EAAAG,OAAAF,GAAAC,EAAA,WAAAG,KAAAL,EAAAE,EAAAwE,KAAArE,GAAA,OAAAH,EAAAyF,UAAA,SAAAzB,IAAA,KAAAhE,EAAA6E,QAAA,KAAA9E,EAAAC,EAAA0F,MAAA,GAAA3F,KAAAD,EAAA,OAAAkE,EAAAzD,MAAAR,EAAAiE,EAAAX,MAAA,EAAAW,CAAA,QAAAA,EAAAX,MAAA,EAAAW,CAAA,GAAAlE,EAAA0C,OAAAA,EAAAjB,EAAArB,UAAA,CAAA8E,YAAAzD,EAAAoD,MAAA,SAAA7E,GAAA,QAAA6F,KAAA,OAAA3B,KAAA,OAAAP,KAAA,KAAAC,MAAA3D,EAAA,KAAAsD,MAAA,OAAAE,SAAA,UAAAD,OAAA,YAAA3B,IAAA5B,EAAA,KAAAwE,WAAA5B,QAAA8B,IAAA3E,EAAA,QAAAE,KAAA,WAAAA,EAAA4F,OAAA,IAAAzF,EAAAyB,KAAA,KAAA5B,KAAA4E,OAAA5E,EAAA6F,MAAA,WAAA7F,GAAAD,EAAA,EAAA+F,KAAA,gBAAAzC,MAAA,MAAAtD,EAAA,KAAAwE,WAAA,GAAAG,WAAA,aAAA3E,EAAA2B,KAAA,MAAA3B,EAAA4B,IAAA,YAAAoE,IAAA,EAAApC,kBAAA,SAAA7D,GAAA,QAAAuD,KAAA,MAAAvD,EAAA,IAAAE,EAAA,cAAAgG,EAAA7F,EAAAE,GAAA,OAAAK,EAAAgB,KAAA,QAAAhB,EAAAiB,IAAA7B,EAAAE,EAAAgE,KAAA7D,EAAAE,IAAAL,EAAAsD,OAAA,OAAAtD,EAAA2B,IAAA5B,KAAAM,CAAA,SAAAA,EAAA,KAAAkE,WAAAM,OAAA,EAAAxE,GAAA,IAAAA,EAAA,KAAAG,EAAA,KAAA+D,WAAAlE,GAAAK,EAAAF,EAAAkE,WAAA,YAAAlE,EAAA2D,OAAA,OAAA6B,EAAA,UAAAxF,EAAA2D,QAAA,KAAAwB,KAAA,KAAA/E,EAAAT,EAAAyB,KAAApB,EAAA,YAAAM,EAAAX,EAAAyB,KAAApB,EAAA,iBAAAI,GAAAE,EAAA,SAAA6E,KAAAnF,EAAA4D,SAAA,OAAA4B,EAAAxF,EAAA4D,UAAA,WAAAuB,KAAAnF,EAAA6D,WAAA,OAAA2B,EAAAxF,EAAA6D,WAAA,SAAAzD,GAAA,QAAA+E,KAAAnF,EAAA4D,SAAA,OAAA4B,EAAAxF,EAAA4D,UAAA,YAAAtD,EAAA,MAAAsC,MAAA,kDAAAuC,KAAAnF,EAAA6D,WAAA,OAAA2B,EAAAxF,EAAA6D,WAAA,KAAAT,OAAA,SAAA7D,EAAAD,GAAA,QAAAE,EAAA,KAAAuE,WAAAM,OAAA,EAAA7E,GAAA,IAAAA,EAAA,KAAAK,EAAA,KAAAkE,WAAAvE,GAAA,GAAAK,EAAA8D,QAAA,KAAAwB,MAAAxF,EAAAyB,KAAAvB,EAAA,oBAAAsF,KAAAtF,EAAAgE,WAAA,KAAA7D,EAAAH,EAAA,OAAAG,IAAA,UAAAT,GAAA,aAAAA,IAAAS,EAAA2D,QAAArE,GAAAA,GAAAU,EAAA6D,aAAA7D,EAAA,UAAAE,EAAAF,EAAAA,EAAAkE,WAAA,UAAAhE,EAAAgB,KAAA3B,EAAAW,EAAAiB,IAAA7B,EAAAU,GAAA,KAAA8C,OAAA,YAAAU,KAAAxD,EAAA6D,WAAApC,GAAA,KAAAgE,SAAAvF,EAAA,EAAAuF,SAAA,SAAAlG,EAAAD,GAAA,aAAAC,EAAA2B,KAAA,MAAA3B,EAAA4B,IAAA,gBAAA5B,EAAA2B,MAAA,aAAA3B,EAAA2B,KAAA,KAAAsC,KAAAjE,EAAA4B,IAAA,WAAA5B,EAAA2B,MAAA,KAAAqE,KAAA,KAAApE,IAAA5B,EAAA4B,IAAA,KAAA2B,OAAA,cAAAU,KAAA,kBAAAjE,EAAA2B,MAAA5B,IAAA,KAAAkE,KAAAlE,GAAAmC,CAAA,EAAAiE,OAAA,SAAAnG,GAAA,QAAAD,EAAA,KAAAyE,WAAAM,OAAA,EAAA/E,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAuE,WAAAzE,GAAA,GAAAE,EAAAqE,aAAAtE,EAAA,YAAAkG,SAAAjG,EAAA0E,WAAA1E,EAAAsE,UAAAG,EAAAzE,GAAAiC,CAAA,GAAAkE,MAAA,SAAApG,GAAA,QAAAD,EAAA,KAAAyE,WAAAM,OAAA,EAAA/E,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAuE,WAAAzE,GAAA,GAAAE,EAAAmE,SAAApE,EAAA,KAAAI,EAAAH,EAAA0E,WAAA,aAAAvE,EAAAuB,KAAA,KAAArB,EAAAF,EAAAwB,IAAA8C,EAAAzE,EAAA,QAAAK,CAAA,QAAA+C,MAAA,0BAAAgD,cAAA,SAAAtG,EAAAE,EAAAG,GAAA,YAAAoD,SAAA,CAAA5C,SAAA6B,EAAA1C,GAAAiE,WAAA/D,EAAAiE,QAAA9D,GAAA,cAAAmD,SAAA,KAAA3B,IAAA5B,GAAAkC,CAAA,GAAAnC,CAAA,UAAAuG,EAAAlG,EAAAJ,EAAAD,EAAAE,EAAAK,EAAAK,EAAAE,GAAA,QAAAJ,EAAAL,EAAAO,GAAAE,GAAAE,EAAAN,EAAAD,KAAA,OAAAJ,GAAA,YAAAL,EAAAK,EAAA,CAAAK,EAAA6C,KAAAtD,EAAAe,GAAAyE,QAAAvC,QAAAlC,GAAAoC,KAAAlD,EAAAK,EAAA,UAAAiG,EAAAnG,GAAA,sBAAAJ,EAAA,KAAAD,EAAAyG,UAAA,WAAAhB,SAAA,SAAAvF,EAAAK,GAAA,IAAAK,EAAAP,EAAAqG,MAAAzG,EAAAD,GAAA,SAAA2G,EAAAtG,GAAAkG,EAAA3F,EAAAV,EAAAK,EAAAoG,EAAAC,EAAA,OAAAvG,EAAA,UAAAuG,EAAAvG,GAAAkG,EAAA3F,EAAAV,EAAAK,EAAAoG,EAAAC,EAAA,QAAAvG,EAAA,CAAAsG,OAAA,QADA,SAAWE,EAAQC,EAASC,EAAUC,EAAeC,EAAcC,EAAWC,GAC1E,IAAQC,EAAiDD,EAAjDC,OAAQC,EAAyCF,EAAzCE,SAAUC,EAA+BH,EAA/BG,UAAWC,EAAoBJ,EAApBI,OAAQC,EAAYL,EAAZK,QACrCC,EAA0ER,EAA1EQ,UAAWC,EAA+DT,EAA/DS,OAAQC,EAAuDV,EAAvDU,KAAMC,EAAiDX,EAAjDW,QAASC,EAAwCZ,EAAxCY,KAAMC,EAAkCb,EAAlCa,SAAUC,EAAwBd,EAAxBc,YAAaC,EAAWf,EAAXe,OAC/DC,EAAgBpB,EAAhBoB,GAAIC,EAAYrB,EAAZqB,QAINC,EAAa,mBAGbC,EAAe,WACjB,OAAO,IAAI3C,SAAQ,SAACvC,EAASmF,GACzB,IAAMC,EAAUC,UAAUC,KANlB,sBAEG,GAMXF,EAAQG,QAAU,SAACC,GACfC,QAAQC,MAAM,kBAAmBF,EAAMG,OAAOD,OAC9CP,EAAOK,EAAMG,OAAOD,MACxB,EAEAN,EAAQQ,UAAY,SAACJ,GACjBxF,EAAQwF,EAAMG,OAAOE,OACzB,EAEAT,EAAQU,gBAAkB,SAACN,GACvB,IAAMO,EAAKP,EAAMG,OAAOE,OACnBE,EAAGC,iBAAiBC,SAAShB,IAC9Bc,EAAGG,kBAAkBjB,EAAY,CAAEkB,QAAS,OAEpD,CACJ,GACJ,EAEMC,EAAY,eAAAC,EAAA/C,EAAAzG,IAAAqF,MAAG,SAAAoE,EAAOC,GAAG,IAAAR,EAAA,OAAAlJ,IAAAuB,MAAA,SAAAoI,GAAA,cAAAA,EAAA7D,KAAA6D,EAAAxF,MAAA,cAAAwF,EAAA7D,KAAA,EAAA6D,EAAAxF,KAAA,EAENkE,IAAc,OAAvB,OAAFa,EAAES,EAAA/F,KAAA+F,EAAA5F,OAAA,SACD,IAAI2B,SAAQ,SAACvC,EAASmF,GACzB,IAEMC,EAFcW,EAAGU,YAAY,CAACxB,GAAa,YACvByB,YAAYzB,GAChB0B,IAAIJ,GAE1BnB,EAAQG,QAAU,kBAAMJ,EAAO,2BAA2B,EAC1DC,EAAQQ,UAAY,kBAAM5F,EAAQoF,EAAQS,OAAST,EAAQS,OAAOtI,MAAQ,KAAK,CACnF,KAAE,OAEmC,OAFnCiJ,EAAA7D,KAAA,EAAA6D,EAAAI,GAAAJ,EAAA,SAEFf,QAAQC,MAAM,eAAcc,EAAAI,IAASJ,EAAA5F,OAAA,SAC9B,MAAI,yBAAA4F,EAAA1D,OAAA,GAAAwD,EAAA,kBAElB,gBAfiBO,GAAA,OAAAR,EAAA7C,MAAA,KAAAD,UAAA,KAiBZuD,EAAW,eAAAC,EAAAzD,EAAAzG,IAAAqF,MAAG,SAAA8E,EAAOT,EAAKhJ,GAAK,IAAAwI,EAAA,OAAAlJ,IAAAuB,MAAA,SAAA6I,GAAA,cAAAA,EAAAtE,KAAAsE,EAAAjG,MAAA,cAAAiG,EAAAtE,KAAA,EAAAsE,EAAAjG,KAAA,EAEZkE,IAAc,OAAvB,OAAFa,EAAEkB,EAAAxG,KAAAwG,EAAArG,OAAA,SACD,IAAI2B,SAAQ,SAACvC,EAASmF,GACzB,IAEMC,EAFcW,EAAGU,YAAY,CAACxB,GAAa,aACvByB,YAAYzB,GAChBiC,IAAI,CAAEX,IAAAA,EAAKhJ,MAAAA,IAEjC6H,EAAQG,QAAU,kBAAMJ,EAAO,wBAAwB,EACvDC,EAAQQ,UAAY,kBAAM5F,GAAS,CACvC,KAAE,OAAAiH,EAAAtE,KAAA,EAAAsE,EAAAL,GAAAK,EAAA,SAEFxB,QAAQC,MAAM,eAAcuB,EAAAL,IAAS,yBAAAK,EAAAnE,OAAA,GAAAkE,EAAA,kBAE5C,gBAdgBG,EAAAC,GAAA,OAAAL,EAAAvD,MAAA,KAAAD,UAAA,KAgBX8D,EAAU,eAAAC,EAAAhE,EAAAzG,IAAAqF,MAAG,SAAAqF,IAAA,IAAAxB,EAAA,OAAAlJ,IAAAuB,MAAA,SAAAoJ,GAAA,cAAAA,EAAA7E,KAAA6E,EAAAxG,MAAA,cAAAwG,EAAA7E,KAAA,EAAA6E,EAAAxG,KAAA,EAEMkE,IAAc,OAAvB,OAAFa,EAAEyB,EAAA/G,KAAA+G,EAAA5G,OAAA,SACD,IAAI2B,SAAQ,SAACvC,EAASmF,GACzB,IAEMC,EAFcW,EAAGU,YAAY,CAACxB,GAAa,aACvByB,YAAYzB,GAChBwC,QAEtBrC,EAAQG,QAAU,kBAAMJ,EAAO,uBAAuB,EACtDC,EAAQQ,UAAY,kBAAM5F,GAAS,CACvC,KAAE,OAEmC,MAFnCwH,EAAA7E,KAAA,EAAA6E,EAAAZ,GAAAY,EAAA,SAEF/B,QAAQC,MAAM,eAAc8B,EAAAZ,IAASY,EAAAZ,GAAA,yBAAAY,EAAA1E,OAAA,GAAAyE,EAAA,kBAG5C,kBAfe,OAAAD,EAAA9D,MAAA,KAAAD,UAAA,KA0JVmE,EAAUC,MAAMC,MAAK,SAAAC,GAA+C,IAA5CC,EAAQD,EAARC,SAAUC,EAAIF,EAAJE,KAAeC,GAAFH,EAAPI,QAAqBJ,EAAZG,cACGE,EAAAC,EAAdhE,EAAS,MAAK,GAA/CiE,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GACpCI,EAAmCP,EAA3BQ,MAAAA,OAAK,IAAAD,EAAG,CAAC,EAACA,EAAAE,EAAiBT,EAAfU,MAAAA,OAAK,IAAAD,EAAG,GAAEA,EAExBE,EAAYH,EAAMT,aAAQ,EAARA,EAAU7F,OAAS,CAAEwG,MAAO,CAAC,EAAGE,MAAO,GACzDC,EAAU3L,OAAOuF,KAAKkG,EAAUD,OAGhCI,EAAavE,GAAQ,WACvB,OAAOmE,EAAMK,QAAO,SAAAC,GAAI,OAAIH,EAAQI,SAASD,EAAKE,QAAQC,WAAW,GACzE,GAAG,CAACT,EAAOG,IAGLO,EAAe7E,GAAQ,WACzB,IAAM8E,EAAS,CAAC,EAmBhB,OAjBAP,EAAWlJ,SAAQ,SAAAoJ,GAAQ,IAAAM,EAAAC,EACjBC,GAAqC,QAA7BF,EAAAX,EAAUD,MAAMM,EAAKE,gBAAQ,IAAAI,OAAA,EAA7BA,EAA+BE,QAAS,EAChDC,GAAuC,QAA7BF,EAAAZ,EAAUD,MAAMM,EAAKE,gBAAQ,IAAAK,OAAA,EAA7BA,EAA+BE,UAAW,GAEpDjD,EAAM,GAAHkD,OAAMV,EAAKW,WAAU,KAAAD,OAAIV,EAAKE,SAElCG,EAAO7C,KACR6C,EAAO7C,GAAIoD,EAAAA,EAAA,GACJZ,GAAI,IACPa,WAAY,EACZJ,QAAAA,KAIRJ,EAAO7C,GAAKqD,YAAcL,CAC9B,IAEOtM,OAAOuC,OAAO4J,EACzB,GAAG,CAACP,EAAYH,IAEVmB,EAAkB,SAAlBA,EAAmBC,GAAqB,IAAAC,EAAdC,EAAKzG,UAAA1B,OAAA,QAAAoI,IAAA1G,UAAA,GAAAA,UAAA,GAAG,EACpC,OAAKuG,EAAM7H,KAGP0F,MAAAuC,cAAA,OACI3D,IAAKuD,EAAMK,UAAY,GAAJV,OAAOK,EAAM7H,KAAI,KAAAwH,OAAIO,EAAK,KAAAP,OAAIW,KAAKC,SAASnB,SAAS,IAAIoB,OAAO,EAAG,IACtFC,UAAU,kCACVC,MAAO,CAAEC,WAAY,GAAFhB,OAAa,GAARO,EAAU,QAElCrC,MAAAuC,cAAA,OAAKK,UAAU,8BACVT,EAAMY,MACH/C,MAAAuC,cAAA,QAAMK,UAAU,aAAaC,MAAOV,EAAMa,UAAY,CAAEC,MAAOd,EAAMa,WAAc,CAAC,GACzD,iBAAfb,EAAMY,MAAsBZ,EAAMY,KAAK1B,SAAS,KAGpDrB,MAAAuC,cAAA,QAAMW,wBAAyB,CAAEC,OAAQhB,EAAMY,QAF/C/C,MAAAuC,cAAA,QAAMK,UAAS,uBAAAd,OAAyBK,EAAMY,SAMzDZ,EAAM7H,MAEO,QADZ8H,EACLD,EAAMiB,mBAAW,IAAAhB,OAAA,EAAjBA,EAAmBiB,KAAI,SAAAC,GAAU,OAAIpB,EAAgBoB,EAAYjB,EAAQ,EAAE,KApB5D,IAuB5B,EAEA,OACIrC,MAAAuC,cAAA,OAAKK,UAAU,0BAA0BW,IAAK7G,EAAO,OACjDsD,MAAAuC,cAAA,OAAKK,UAAU,kCACX5C,MAAAuC,cAAA,UACIvC,MAAAuC,cAAA,OAAKK,UAAU,6BACVzC,EAAS4C,MACN/C,MAAAuC,cAAA,QAAMK,UAAU,aAAaC,MAAO1C,EAAS6C,UAAY,CAAEC,MAAO9C,EAAS6C,WAAc,CAAC,GAC5D,iBAAlB7C,EAAS4C,MAAsB5C,EAAS4C,KAAK1B,SAAS,KAG1DrB,MAAAuC,cAAA,QAAMW,wBAAyB,CAAEC,OAAQhD,EAAS4C,QAFlD/C,MAAAuC,cAAA,QAAMK,UAAS,uBAAAd,OAAyB3B,EAAS4C,SAM7D/C,MAAAuC,cAAA,YAAOpC,EAASqD,QAEpBxD,MAAAuC,cAAA,QAAMK,UAAU,kCACXpB,EAAatH,OAAO,IAAEkD,EAAG,YAAa,sBAAsB,MAAI2D,EAAUC,MAAM,IAAE5D,EAAG,YAAa,yBAI/G4C,MAAAuC,cAAA,OAAKK,UAAU,mCACX5C,MAAAuC,cAAA,OAAKK,UAAU,8BACX5C,MAAAuC,cAAA,SAAGvC,MAAAuC,cAAA,cAASnF,EAAG,QAAS,uBAA+B,IAAE+C,EAASqD,OAClExD,MAAAuC,cAAA,SAAGvC,MAAAuC,cAAA,cAASnF,EAAG,eAAgB,uBAA+B,IAAE+C,EAASsD,aACzEzD,MAAAuC,cAAA,SAAGvC,MAAAuC,cAAA,cAASnF,EAAG,YAAa,uBAA+B,IAAE+C,EAASuD,WAGzElC,EAAatH,OAAS,EACnB8F,MAAAuC,cAAAvC,MAAA2D,SAAA,KACI3D,MAAAuC,cAAA,OAAKK,UAAU,+BACX5C,MAAAuC,cAAA,YAAMvC,MAAAuC,cAAA,cAASnF,EAAG,aAAc,uBAA+B,IAAEoE,EAAatH,QAC9E8F,MAAAuC,cAAA,YAAMvC,MAAAuC,cAAA,cAASnF,EAAG,mBAAoB,uBAA+B,IAAE2D,EAAUC,QAGrFhB,MAAAuC,cAAA,OAAKK,UAAU,6BACVpB,EAAa6B,KAAI,SAACjC,GAAS,IAAAwC,EAClBC,EAAapD,IAAiBW,EAAKE,QACnCwC,EAAgB1C,EAAK2C,UAE3B,OACI/D,MAAAuC,cAAA,OAAK3D,IAAKwC,EAAKE,QAASsB,UAAS,6BAAAd,OAA+B+B,EAAa,WAAa,KACtF7D,MAAAuC,cAAA,OACIK,UAAU,8BACVoB,QAAS,kBAAMtD,EAAgBmD,EAAa,KAAOzC,EAAKE,QAAQ,GAEhEtB,MAAAuC,cAAA,OAAKK,UAAU,8BACVxB,EAAKW,WACN/B,MAAAuC,cAAA,QAAMK,UAAU,8BACXzC,EAAS7F,OAGlB0F,MAAAuC,cAAA,OAAKK,UAAU,6BACX5C,MAAAuC,cAAA,QAAMK,UAAU,6BACXkB,IAGT9D,MAAAuC,cAAC1F,EAAM,CACHoH,KAAK,QACLlB,KAAMc,EAAa,gBAAkB,kBACrCjB,UAAU,mCAIjBiB,GACG7D,MAAAuC,cAAA,OAAKK,UAAU,gCACX5C,MAAAuC,cAAA,OAAKK,UAAU,+BACX5C,MAAAuC,cAAA,UAAKnF,EAAG,uBAAwB,wBACpB,QAAXwG,EAAAxC,EAAK8C,cAAM,IAAAN,OAAA,EAAXA,EAAa1J,QAAS,EACnBkH,EAAK8C,OAAOb,KAAI,SAAAlB,GAAK,OAAID,EAAgBC,EAAM,IAE/CnC,MAAAuC,cAAA,SAAInF,EAAG,gCAAiC,wBAGhD4C,MAAAuC,cAAA,OAAKK,UAAU,gCACVxB,EAAK+C,WAAa9D,GACfL,MAAAuC,cAAC1F,EAAM,CACHuH,QAAQ,YACRC,SAAO,EACPC,KAAMlD,EAAK+C,UACXnG,OAAO,UAENZ,EAAG,YAAa,uBAGzB4C,MAAAuC,cAAC1F,EAAM,CACHuH,QAAQ,YACRH,KAAK,QACLK,KAAMlD,EAAKmD,UACXvG,OAAO,UAENZ,EAAG,YAAa,yBAO7C,MAIR4C,MAAAuC,cAAA,OAAKK,UAAU,8BACVxC,EAAKoE,aACFxE,MAAAuC,cAAAvC,MAAA2D,SAAA,KACI3D,MAAAuC,cAAA,SAAGvC,MAAAuC,cAAA,UAAKnF,EAAG,yCAA0C,wBACrD4C,MAAAuC,cAAA,SAAInF,EAAG,aAAc,sBAAsB,IAAE,IAAIqH,KAAKrE,EAAKoE,cAAcE,mBAG7E1E,MAAAuC,cAAAvC,MAAA2D,SAAA,KACI3D,MAAAuC,cAAA,SAAGvC,MAAAuC,cAAA,UAAKnF,EAAG,4CAA6C,wBACxD4C,MAAAuC,cAAA,SAAInF,EAAG,4CAA6C,0BAQpF,IAEMuH,EAAM,WACR,IAAAC,EAKIC,OAAOC,wBAA0B,CAAC,EAACC,EAAAH,EAJnCI,QAAAA,OAAO,IAAAD,EAAG,GAAEA,EAAAE,EAAAL,EACZM,MAAAA,OAAK,IAAAD,EAAG,GAAEA,EACVE,EAAWP,EAAXO,YACAC,EAAWR,EAAXQ,YAG2DC,EAAA7E,EAA3BhE,GAAS,kBAxU/B,WACd,QAAyB,IAAd8I,GAAGpB,OACV,MAAO,CAAEA,OAAQ,GAAIqB,WAAY,IAIjCD,GAAGE,cAA8D,mBAAvCF,GAAGE,aAAaC,oBAC1CH,GAAGE,aAAaC,qBAGpB,IAAIC,EAAYJ,GAAGpB,OAAOyB,gBACtBC,EAAgBN,GAAGpB,OAAO2B,gBAC1BC,EAAa,GAGXC,GAAuBlB,OAAOC,wBAA0B,CAAC,GAAGkB,iBAAmB,GAC/EC,EAAmBF,EAAoBG,QAAO,SAAC7C,EAAK8C,GAEtD,OADA9C,EAAI8C,EAAIC,MAAQD,EAAI3C,MACbH,CACX,GAAG,CAAC,GAG6DgD,GAAnCxB,OAAOC,wBAA0B,CAAC,GAAxDwB,aAAAA,OAAY,IAAAD,EAAG,GAAEA,EACzB,GAAIC,EAAapM,OAAS,EAAG,CACzB,IAAMqM,EAAcD,EAAanF,QAC7B,SAAAqF,GAAO,OAAKd,EAAUe,MAAK,SAAAC,GAAO,OAAIF,EAAQlM,OAASoM,EAAQpM,IAAI,GAAC,IAEpEiM,EAAYrM,OAAS,IACrBwL,EAAY,GAAH5D,OAAA6E,EAAOjB,GAASiB,EAAKJ,IAEtC,CAWAb,EAAY,GAAH5D,OAAA6E,EAAOjB,GARc,CAC1B,CACI,KAAQ,oBACR,KAAQ,gBACR,MAAS,eACT,SAAY,cAcpBA,EAAY,GAAH5D,OAAA6E,EAAOjB,GARO,CACnB,CACI,KAAQ,qBACR,KAAQ,gBACR,MAAS,gBACT,SAAY,cAMV1N,SAAQ,SAAUmK,GACxB,IAAIyE,EAAgB,GACdC,EAAY,CACdvM,KAAM6H,EAAM7H,KACZyI,KAAMZ,EAAMY,KAAK+D,KAAO3E,EAAMY,KAC9BS,MAAOrB,EAAMqB,MACbE,SAAUvB,EAAMuB,UAAY,SAC5BqD,OAAQ5E,EAAM4E,OACdtD,YAAatB,EAAMsB,aAAe,IAIlCwC,EAAiBY,EAAUnD,YAC3BmD,EAAUG,cAAgBf,EAAiBY,EAAUnD,WAGzD,IAAMuD,EAAc9E,EAAMY,KAAK+D,IAAM3E,EAAMY,KAAK+D,IAAM3E,EAAMY,UAE9BT,IAA1BH,EAAMY,KAAKmE,aAA0BL,EAAU7D,UAAYb,EAAMY,KAAKmE,YAEjD,mBAAdD,OAC4B,IAAxBA,EAAU1R,WACjBsR,EAAU9D,KAAOuC,GAAG6B,QAAQC,eAAe9B,GAAG6B,QAAQ5E,cAAc0E,IACpEJ,EAAU9D,KAAO8D,EAAU9D,KAAKsE,QAAQ,aAAc,cACtDR,EAAU9D,KAAO8D,EAAU9D,KAAKsE,QAAQ,eAAgB,kBAExDT,EAAgBtB,GAAG6B,QAAQ5E,cAAc+C,GAAGgC,WAAWC,SAAU,CAAExE,KAAM,kBACzE8D,EAAU9D,KAAOuC,GAAG6B,QAAQC,eAAeR,IAEnB,WAArBxO,EAAO6O,IACdJ,EAAU9D,KAAOuC,GAAG6B,QAAQC,eAAeH,GAC3CJ,EAAU9D,KAAO8D,EAAU9D,KAAKsE,QAAQ,aAAc,cACtDR,EAAU9D,KAAO8D,EAAU9D,KAAKsE,QAAQ,eAAgB,iBAEnC,iBAAdJ,GACHA,EAAU5F,SAAS,UACnB4F,EAAU5F,SAAS,QAKvBwF,EAAU9D,KAAOkE,GAHjBL,EAAgBtB,GAAG6B,QAAQ5E,cAAc+C,GAAGgC,WAAWC,SAAU,CAAExE,KAAMkE,IACzEJ,EAAU9D,KAAOuC,GAAG6B,QAAQC,eAAeR,IAK/Cd,EAAWjM,KAAKgN,EACpB,IAKA,IAFA,IAAMW,EAAc,GAChB3R,EAAIiQ,EAAW5L,OACZrE,KAAK,CACR,IAAMyE,EAAOwL,EAAWjQ,GAAGyE,KACvBkN,EAAYnG,SAAS/G,GACrBwL,EAAW2B,OAAO5R,EAAG,GAErB2R,EAAY3N,KAAKS,EAEzB,CAmBA,OAhBAsL,EAAc8B,MAAK,SAAC3R,EAAG4R,GACnB,MAAe,mBAAX5R,EAAEqQ,MAAmC,EAC1B,mBAAXuB,EAAEvB,KAAkC,EACjC,CACX,IAGAL,EAAoB/N,SAAQ,SAAA4P,GACnBhC,EAAca,MAAK,SAAAN,GAAG,OAAIA,EAAIC,OAASwB,EAAaxB,IAAI,KACzDR,EAAc/L,KAAK,CACfuM,KAAMwB,EAAaxB,KACnB5C,MAAOoE,EAAapE,OAGhC,IAEO,CACHU,OAAQ4B,EACRP,WAAYK,EAEpB,CAiMuDiC,EAAW,IAAC,GAAxDC,EAAUzC,EAAA,GAC4B0C,GADb1C,EAAA,GACa7E,EAArBhE,EAAS2I,GAAY,IAAtC/E,EAAI2H,EAAA,GAAEC,EAAOD,EAAA,GAC+BE,EAAAzH,EAAfhE,GAAS,GAAM,GAA5C0L,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAC6BG,EAAA5H,EAAfhE,GAAS,GAAM,GAAtD6L,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GACIG,EAAA/H,EAAdhE,EAAS,MAAK,GAAvC2D,EAAQoI,EAAA,GAAEC,EAAWD,EAAA,GACgCE,EAAAjI,EAAdhE,GAAS,GAAK,GAArDkM,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GAMxCG,EAAApI,EALsChE,EAAS,CAC7CqM,QAAS,EACT7H,MAAO,EACP8H,OAAQ,GACRC,WAAW,IACb,GALKC,EAAYJ,EAAA,GAAEK,EAAeL,EAAA,GAMQM,EAAA1I,EAAdhE,EAAS,MAAK,GAArC2M,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAC2CG,EAAA7I,EAAfhE,GAAS,GAAM,GAA9D8M,GAAmBD,EAAA,GAAEE,GAAsBF,EAAA,GAGlD5M,GAAU,WACN,IAAM+M,EAAQ,eAAAC,EAAA9N,EAAAzG,IAAAqF,MAAG,SAAAmP,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAA3U,IAAAuB,MAAA,SAAAqT,GAAA,cAAAA,EAAA9O,KAAA8O,EAAAzQ,MAAA,cAAAyQ,EAAA9O,KAAA,EAAA8O,EAAAzQ,KAAA,EAEgBoF,EAAa,oBAAmB,OAAzC,OAAVkL,EAAUG,EAAAhR,KAAAgR,EAAAzQ,KAAG,EACUoF,EAAa,wBAAuB,OAA3DmL,EAAcE,EAAAhR,KAEhB6Q,GACA3B,EAAQ2B,GAGRC,IACAjB,GAAsD,IAAnCiB,EAAelB,iBAE9BkB,EAAeG,oBACTF,EAAe/B,EAAW5D,OAAO8F,MAAK,SAAArC,GAAC,OAAIA,EAAErN,OAASsP,EAAeG,iBAAiB,MAExFvB,EAAYqB,IAIxBN,IAAuB,GAAMO,EAAAzQ,KAAA,iBAAAyQ,EAAA9O,KAAA,GAAA8O,EAAA7K,GAAA6K,EAAA,SAE7BhM,QAAQC,MAAM,sCAAqC+L,EAAA7K,IACnDmK,EAAWhM,EAAG,mEAAoE,uBAClFmM,IAAuB,GAAM,yBAAAO,EAAA3O,OAAA,GAAAuO,EAAA,mBAEpC,kBAzBa,OAAAD,EAAA5N,MAAA,KAAAD,UAAA,KA2Bd4N,GACJ,GAAG,CAAC1B,EAAW5D,SAEf,IAAM+F,GAAW,SAACC,GAAsB,IAC9BC,EAAO,IAAIC,gBAAepI,EAAC,CAAEkI,OAAAA,EAAQhF,MAAAA,GADjBtJ,UAAA1B,OAAA,QAAAoI,IAAA1G,UAAA,GAAAA,UAAA,GAAG,CAAC,IAE9B,OAAOyO,MAAMrF,EAAS,CAClBrM,OAAQ,OACR2R,QAAS,CAAE,eAAgB,qCAC3BH,KAAAA,IACD5R,MAAK,SAAAlD,GAAC,OAAIA,EAAEkV,MAAM,GACzB,EAEMC,GAAkB,eAAAC,EAAA9O,EAAAzG,IAAAqF,MAAG,SAAAmQ,EAAO9U,GAAK,OAAAV,IAAAuB,MAAA,SAAAkU,GAAA,cAAAA,EAAA3P,KAAA2P,EAAAtR,MAAA,OACT,OAA1BsP,EAAmB/S,GAAO+U,EAAA3P,KAAA,EAAA2P,EAAAtR,KAAA,EAEhB8F,EAAY,uBAAwB,CACtCuJ,gBAAiB9S,EACjBmU,mBAAmB5J,aAAQ,EAARA,EAAU7F,OAAQ,KACvC,OAAAqQ,EAAAtR,KAAA,eAAAsR,EAAA3P,KAAA,EAAA2P,EAAA1L,GAAA0L,EAAA,SAEF7M,QAAQC,MAAM,0CAAyC4M,EAAA1L,IAAS,wBAAA0L,EAAAxP,OAAA,GAAAuP,EAAA,kBAEvE,gBAVuBE,GAAA,OAAAH,EAAA5O,MAAA,KAAAD,UAAA,KAYlB2J,GAAa5I,GAAQ,WACvB,IAAMkO,EAAO,CAAC,EAGRC,EAAgBhD,EAAWvC,WAAWyE,MAAK,SAAA7D,GAAG,MAAiB,mBAAbA,EAAIC,IAAyB,IA8BrF,OA7BI0E,IACAD,EAAKC,EAAc1E,MAAQ,CACvB5C,MAAOsH,EAActH,MACrBU,OAAQ,KAKhB4D,EAAWvC,WAAWvN,SAAQ,SAAAmO,GACT,mBAAbA,EAAIC,OACJyE,EAAK1E,EAAIC,MAAQ,CACb5C,MAAO2C,EAAI3C,MACXU,OAAQ,IAGpB,IAGA4D,EAAW5D,OAAOlM,SAAQ,SAAAmK,GACtB,IAAM4I,EAAU5I,EAAMuB,UAAY,SAC7BmH,EAAKE,KACNF,EAAKE,GAAW,CACZvH,MAAOrB,EAAM6E,eAAiB+D,EAC9B7G,OAAQ,KAGhB2G,EAAKE,GAAS7G,OAAOrK,KAAKsI,EAC9B,IAEO0I,CACX,GAAG,CAAC/C,EAAWvC,WAAYuC,EAAW5D,SAEhC8G,GAAqBrO,GAAQ,WAC/B,GAAI+L,EAAiB,OAAOnD,GAE5B,IAAM0F,EAAW,CAAC,EAclB,OAbA3V,OAAO4V,QAAQ3F,IAAYvN,SAAQ,SAAAmT,GAAsB,IAAAC,EAAA5K,EAAA2K,EAAA,GAApB/E,EAAIgF,EAAA,GAAE1H,EAAQ0H,EAAA,GACzCC,EAAiB3H,EAASQ,OAAO/C,QAAO,SAAAmK,GAC1C,OAAOlL,EAAKQ,MAAM0K,EAAGhR,OAAShF,OAAOuF,KAAKuF,EAAKQ,MAAM0K,EAAGhR,MAAMwG,OAAO5G,OAAS,CAClF,IAEImR,EAAenR,OAAS,IACxB+Q,EAAS7E,GAAKpE,EAAAA,EAAA,GACP0B,GAAQ,IACXQ,OAAQmH,IAGpB,IAEOJ,CACX,GAAG,CAAC1F,GAAYnF,EAAKQ,MAAO8H,IAE5BjM,GAAU,WACN,IAAK0D,GAAY2H,EAAW5D,OAAOhK,OAAS,GAAKoP,GAAqB,CAClE,IAAMiC,EAAgBjW,OAAOuC,OAAOmT,IAAoB,GACpDO,GAAiBA,EAAcrH,OAAOhK,OAAS,GAC/CsO,EAAY+C,EAAcrH,OAAO,GAEzC,CACJ,GAAG,CAAC8G,GAAoBlD,EAAW5D,OAAQoF,KAE3C,IAAMkC,GAAO,eAAAC,EAAA9P,EAAAzG,IAAAqF,MAAG,SAAAmR,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA9W,IAAAuB,MAAA,SAAAwV,GAAA,cAAAA,EAAAjR,KAAAiR,EAAA5S,MAAA,OACZ8O,GAAc,GACdc,EAAgB,CACZJ,QAAS,EACT7H,MAAO,EACP8H,OAAQ1L,EAAG,uBAAwB,sBACnC2L,WAAW,IACZkD,EAAAjR,KAAA,EAGK2Q,EAAS,EACPC,EAAY,GACdC,EAAU,CACVjL,MAAO,CAAC,EACRE,MAAO,GACP0D,aAAc,IAEdsH,EAAa,EACbC,GAAe,EAAI,WAEhBA,EAAc,CAAFE,EAAA5S,KAAA,SAQX,OAPJ4P,GAAgB,SAAAjO,GAAI,OAAAgH,EAAAA,EAAA,GACbhH,GAAI,IACP8N,OAAQzL,EACJD,EAAG,+BAAgC,sBACnCuO,EACAG,IACH,IACDG,EAAA5S,KAAA,GAEwB4Q,GAAS,6BAA8B,CAC/D0B,OAAAA,EACAO,WAAYN,IACd,QAHiB,IAAbI,EAAaC,EAAAnT,MAKAqT,QAAS,CAAFF,EAAA5S,KAAA,eAChB,IAAIZ,MAAM2E,EAAG,oBAAqB,uBAAsB,QAuClE,OApCI4O,EAAc5L,KAAKY,QACnB8K,EAAaE,EAAc5L,KAAKY,OAIpC1L,OAAO4V,QAAQc,EAAc5L,KAAKQ,OAAS,CAAC,GAAG5I,SAAQ,SAAAoU,GAA4B,IAAAC,EAAA7L,EAAA4L,EAAA,GAA1BE,EAASD,EAAA,GAAEtL,EAASsL,EAAA,GACpER,EAAQjL,MAAM0L,KACfT,EAAQjL,MAAM0L,GAAa,CACvBxL,MAAO,CAAC,EACRE,MAAO,IAIf1L,OAAO4V,QAAQnK,EAAUD,OAAS,CAAC,GAAG9I,SAAQ,SAAAuU,GAAqB,IAAAC,EAAAhM,EAAA+L,EAAA,GAAnBE,EAAMD,EAAA,GAAEE,EAAKF,EAAA,GACzDX,EAAQjL,MAAM0L,GAAWxL,MAAM2L,GAAUC,CAC7C,IAEAb,EAAQjL,MAAM0L,GAAWtL,OAASD,EAAUC,OAAS,CACzD,IAGA6K,EAAQ/K,MAAQ,GAAHgB,OAAA6E,EAAOkF,EAAQ/K,OAAK6F,EAAMqF,EAAc5L,KAAKU,OAAS,KACnE+K,EAAQrH,aAAewH,EAAc5L,KAAKoE,cAAgBqH,EAAQrH,aAElEmH,GAAUK,EAAc5L,KAAKuM,WAAa,EAC1CZ,EAAeJ,EAASG,EAExB7C,GAAgB,SAAAjO,GAAI,OAAAgH,EAAAA,EAAA,GACbhH,GAAI,IACP6N,QAAS8C,EACT3K,MAAO8K,GAAU,IAIrB9D,EAAQ6D,GAERI,EAAAjR,KAAA,GAAAiR,EAAA5S,KAAA,GAEU8F,EAAY,mBAAoB0M,GAAQ,QAAAI,EAAA5S,KAAA,iBAAA4S,EAAAjR,KAAA,GAAAiR,EAAAhN,GAAAgN,EAAA,UAE9CnO,QAAQC,MAAM,qCAAoCkO,EAAAhN,IAClD,eAAAgN,EAAA5S,KAAA,GAGE,IAAIuB,SAAQ,SAAAvC,GAAO,OAAIuU,WAAWvU,EAAS,IAAI,IAAC,QAAA4T,EAAA5S,KAAA,gBAG1D4P,GAAgB,SAAAjO,GAAI,OAAAgH,EAAAA,EAAA,GACbhH,GAAI,IACP+N,WAAW,EACXD,OAAQ1L,EAAG,+BAAgC,uBAAqB,IAChE6O,EAAA5S,KAAA,iBAAA4S,EAAAjR,KAAA,GAAAiR,EAAAY,GAAAZ,EAAA,SAEJnO,QAAQC,MAAM,cAAakO,EAAAY,IAC3B5D,GAAgB,SAAAjO,GAAI,OAAAgH,EAAAA,EAAA,GACbhH,GAAI,IACP8N,OAAQ1L,EAAG,gBAAiB,sBAAwB6O,EAAAY,GAAMC,SAAO,IACjE,QAUK,OAVLb,EAAAjR,KAAA,GAEJ4R,YAAW,WACPzE,GAAc,GACdc,EAAgB,CACZJ,QAAS,EACT7H,MAAO,EACP8H,OAAQ,GACRC,WAAW,GAEnB,GAAG,KAAMkD,EAAA1Q,OAAA,6BAAA0Q,EAAA9Q,OAAA,GAAAuQ,EAAA,iCAEhB,kBA5GY,OAAAD,EAAA5P,MAAA,KAAAD,UAAA,KA8GPmR,GAAY,eAAAC,EAAArR,EAAAzG,IAAAqF,MAAG,SAAA0S,IAAA,OAAA/X,IAAAuB,MAAA,SAAAyW,GAAA,cAAAA,EAAAlS,KAAAkS,EAAA7T,MAAA,OACQ,OAAzBiP,GAAmB,GAAM4E,EAAAlS,KAAA,EAAAkS,EAAA7T,KAAA,EAEfqG,IAAY,OASlB,OARAsI,EAAQ,CACJpH,MAAO,CAAC,EACRE,MAAO,GACP0D,aAAc,KAElBmE,GAAmB,GACnBH,EAAY,MAEZ0E,EAAA7T,KAAA,EACM8F,EAAY,uBAAwB,CACtCuJ,iBAAiB,EACjBqB,kBAAmB,KACrB,OAAAmD,EAAA7T,KAAA,iBAAA6T,EAAAlS,KAAA,GAAAkS,EAAAjO,GAAAiO,EAAA,SAEFpP,QAAQC,MAAM,wBAAuBmP,EAAAjO,IACrCmK,EAAWhM,EAAG,0CAA2C,uBAAuB,QAEtD,OAFsD8P,EAAAlS,KAAA,GAEhFsN,GAAmB,GAAO4E,EAAA3R,OAAA,6BAAA2R,EAAA/R,OAAA,GAAA8R,EAAA,yBAEjC,kBAvBiB,OAAAD,EAAAnR,MAAA,KAAAD,UAAA,KAyBZuR,GAAkB,eAAAC,EAAAzR,EAAAzG,IAAAqF,MAAG,SAAA8S,EAAO/B,GAAE,IAAAgC,EAAA,OAAApY,IAAAuB,MAAA,SAAA8W,GAAA,cAAAA,EAAAvS,KAAAuS,EAAAlU,MAAA,OAIhC,GAHMiU,GAAcnN,aAAQ,EAARA,EAAU7F,QAASgR,EAAGhR,KAAO,KAAOgR,EACxD9C,EAAY8E,IAGRA,EAAa,CAAFC,EAAAlU,KAAA,gBAAAkU,EAAAvS,KAAA,EAAAuS,EAAAlU,KAAA,EAED8F,EAAY,uBAAwB,CACtCuJ,gBAAAA,EACAqB,kBAAmBuD,EAAYhT,OACjC,OAAAiT,EAAAlU,KAAA,gBAAAkU,EAAAvS,KAAA,EAAAuS,EAAAtO,GAAAsO,EAAA,SAEFzP,QAAQC,MAAM,sCAAqCwP,EAAAtO,IAAS,yBAAAsO,EAAApS,OAAA,GAAAkS,EAAA,kBAGvE,gBAfuBG,GAAA,OAAAJ,EAAAvR,MAAA,KAAAD,UAAA,KAiBxB,OAAK0N,GAWDtJ,MAAAuC,cAAA,OAAKK,UAAS,2BAAAd,OAA6B3B,EAAW,cAAgB,KACjEgJ,GACGnJ,MAAAuC,cAACpF,EAAM,CAAC2L,OAAO,QAAQ2E,SAAU,kBAAMrE,EAAW,KAAK,GAClDD,GAITnJ,MAAAuC,cAAA,OAAKK,UAAU,0BACX5C,MAAAuC,cAACvF,EAAI,CAAC0Q,QAAQ,gBAAgBC,MAAM,UAChC3N,MAAAuC,cAACtF,EAAQ,KACL+C,MAAAuC,cAAC1F,EAAM,CAACuH,QAAQ,UAAUJ,QAASwH,GAASoC,SAAU1F,GACjDA,EAAalI,MAAAuC,cAACxF,EAAO,MAAMK,EAAG,mBAAoB,wBAG3D4C,MAAAuC,cAACtF,EAAQ,KACL+C,MAAAuC,cAAA,OAAKK,UAAU,wBACVxF,EAAG,oBAAqB,sBACzB4C,MAAAuC,cAAA,OAAKK,UAAU,uBACX5C,MAAAuC,cAAA,SAAOK,UAAU,UACb5C,MAAAuC,cAAA,SACIxL,KAAK,WACLuD,KAAK,sBACLuT,GAAG,sBACHC,QAASpF,EACTqF,SAAU,SAAC5Y,GAAC,OAAKqV,GAAmBrV,EAAE6I,OAAO8P,QAAQ,IAEzD9N,MAAAuC,cAAA,QAAMK,UAAU,iBAQvCsF,GACGlI,MAAAuC,cAAA,OAAKK,UAAU,2BACX5C,MAAAuC,cAAA,OAAKK,UAAU,iBACX5C,MAAAuC,cAAA,SAAIyG,EAAaF,QACjB9I,MAAAuC,cAAA,OAAKK,UAAU,iBAAgB5C,MAAAuC,cAACrF,EAAW,CACvCtH,MAAOoT,EAAahI,MAAQ,EAAKgI,EAAaH,QAAUG,EAAahI,MAAS,IAAM,KAEvFgI,EAAahI,MAAQ,GAClBhB,MAAAuC,cAAA,SAAInF,EAAG,aAAc,sBAAsB,IAAE4L,EAAaH,QAAQ,MAAIG,EAAahI,SAMlGZ,EAAKoE,cACFxE,MAAAuC,cAAA,OAAKK,UAAU,6BACX5C,MAAAuC,cAAA,YAAOnF,EAAG,aAAc,sBAAsB,IAAE,IAAIqH,KAAKrE,EAAKoE,cAAcE,kBAC5E1E,MAAAuC,cAAA,OAAKK,UAAU,sBAAsB,cAAY,UAAU,iBAAe,SACpEyF,GACErI,MAAAuC,cAAA,QAAMK,UAAU,kCAAkCC,MAAO,CAAEmL,cAAe,SAAUC,WAAY,aAEpGjO,MAAAuC,cAAC1F,EAAM,CACHuH,QAAQ,YACRJ,QAAS+I,GACTa,SAAU1F,GAAcG,EACxBzF,UAAU,iBACVC,MAAO,CAAEC,WAAY,QAEpBuF,EAAkBrI,MAAAuC,cAACxF,EAAO,MAAMK,EAAG,iBAAkB,wBAExDiL,GACErI,MAAAuC,cAAA,QAAMK,UAAU,gBACZ5C,MAAAuC,cAAA,YAAOnF,EAAG,iMAAmM,uBAC7M4C,MAAAuC,cAAA,aAOpBvC,MAAAuC,cAAA,OAAKK,UAAU,6BACX5C,MAAAuC,cAAA,OAAKK,UAAU,8BACVtN,OAAO4V,QAAQF,IAAoB3H,KAAI,SAAA6K,GAAA,IAAAC,EAAA3N,EAAA0N,EAAA,GAAE9H,EAAI+H,EAAA,GAAAC,EAAAD,EAAA,GAAI3K,EAAK4K,EAAL5K,MAAOU,EAAMkK,EAANlK,OAAM,OAC3DlE,MAAAuC,cAAC3F,EAAS,CAACgC,IAAKwH,EAAM5C,MAAOA,EAAO6K,aAAW,GAC3CrO,MAAAuC,cAAA,OAAKK,UAAU,8BACVsB,EAAOb,KAAI,SAAAiI,GAAM,IAAAgD,EACRC,EAAUnO,EAAKQ,MAAM0K,EAAGhR,OAAShF,OAAOuF,KAAKuF,EAAKQ,MAAM0K,EAAGhR,MAAMwG,OAAO5G,OAAS,EACjF6G,EAAYX,EAAKQ,MAAM0K,EAAGhR,OAAS,CAAEwG,MAAO,CAAC,EAAGE,MAAO,GACvDwN,EAAYlZ,OAAOuF,KAAKkG,EAAUD,OAAO5G,OACzCuU,EAAW1N,EAAUC,MACrB0N,GAA+C,QAAjCJ,EAAAhZ,OAAOuC,OAAOkJ,EAAUD,OAAO,UAAE,IAAAwN,OAAA,EAAjCA,EAAmCzM,UAAW,GAElE,OACI7B,MAAAuC,cAACzF,EAAI,CACD8B,IAAK0M,EAAGhR,KACRsI,UAAS,8BAAAd,QAAgC3B,aAAQ,EAARA,EAAU7F,QAASgR,EAAGhR,KAAO,SAAW,IACjF0J,QAAS,kBAAMmJ,GAAmB7B,EAAG,GAErCtL,MAAAuC,cAAA,OAAKK,UAAU,6BACV0I,EAAGvI,MACA/C,MAAAuC,cAAA,QAAMK,UAAU,aAAaC,MAAOyI,EAAGtI,UAAY,CAAEC,MAAOqI,EAAGtI,WAAc,CAAC,GACtD,iBAAZsI,EAAGvI,MAAsBuI,EAAGvI,KAAK1B,SAAS,KAG9CrB,MAAAuC,cAAA,QAAMW,wBAAyB,CAAEC,OAAQmI,EAAGvI,QAF5C/C,MAAAuC,cAAA,QAAMK,UAAS,uBAAAd,OAAyBwJ,EAAGvI,SAMvD/C,MAAAuC,cAAA,YAAO+I,EAAG9H,QAEb+K,EACGvO,MAAAuC,cAAA,OAAKK,UAAU,+BACX5C,MAAAuC,cAAA,WAAMnF,EAAG,aAAc,sBAAsB,IAAEoR,GAC/CxO,MAAAuC,cAAA,WAAMnF,EAAG,aAAc,sBAAsB,IAAEqR,GAC9CC,GACG1O,MAAAuC,cAAA,OAAKK,UAAU,aACVxF,EAAG,QAAS,sBAAsB,IAAE,IAAIqH,KAAKiK,GAAahK,mBAKvE1E,MAAAuC,cAAA,OAAKK,UAAU,+BACX5C,MAAAuC,cAAA,OAAKK,UAAU,WACVxC,EAAKoE,aACApH,EAAG,yBAA0B,sBAC7BA,EAAG,kBAAmB,wBAIxC4C,MAAAuC,cAAA,OAAKK,UAAU,gCACX5C,MAAAuC,cAAC1F,EAAM,CAACuH,QAAQ,YAAYH,KAAK,QAAQD,QAAS,SAAC7O,GAC/CA,EAAEwZ,kBACFxB,GAAmB7B,EACvB,GACKlO,EAAG,UAAW,wBAKnC,KAEI,KAInB+C,GACGH,MAAAuC,cAACxC,EAAO,CACJnB,IAAKuB,EAAS7F,KACd6F,SAAUA,EACVC,KAAMA,EACNE,QAAS,kBAAMkI,EAAY,KAAK,EAChCnI,cAAc+E,aAAW,EAAXA,EAAa/E,gBAAgB,MA1JvDL,MAAAuC,cAAA,OAAKK,UAAU,2BACX5C,MAAAuC,cAAA,OAAKK,UAAU,kCAAkCC,MAAO,CAAE+L,QAAS,UAC9DxR,EAAG,aAAc,sBAAsB,IAAC4C,MAAAuC,cAACxF,EAAO,OA8JrE,EAGA,GAAkB,oBAAPuI,SAA2C,IAAdA,GAAGpB,OACvC3H,EAAOyD,MAAAuC,cAACoC,EAAG,MAAKkK,SAASC,eAAe,8BACrC,CACH,IAAMC,EAAeF,SAASC,eAAe,yBACzCC,IACAA,EAAaC,UAAY,MAAQ5R,EAAG,+BAAgC,sBAAwB,OAEpG,CAEH,CAt2BD,CAs2BGkI,GAAG2J,KAAM3J,GAAG4J,MAAO5J,GAAGpB,OAAQoB,GAAG6J,YAAa7J,GAAGgC,WAAYhC,GAAG8J,QAAS9J,GAAG6B","sources":["webpack://advanced-gutenberg/./assets/blocks/block-usage/block-usage.jsx"],"sourcesContent":["(function (wpI18n, wpHooks, wpBlocks, wpBlockEditor, wpComponents, wpCompose, wpElement) {\r\n    const { render, useState, useEffect, useRef, useMemo } = wpElement;\r\n    const { PanelBody, Button, Card, Spinner, Flex, FlexItem, ProgressBar, Notice } = wpComponents;\r\n    const { __, sprintf } = wpI18n;\r\n\r\n    // IndexedDB setup\r\n    const DB_NAME = 'publishpress_blocks';\r\n    const STORE_NAME = 'block_usage_data';\r\n    const DB_VERSION = 1;\r\n\r\n    const openDatabase = () => {\r\n        return new Promise((resolve, reject) => {\r\n            const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n\r\n            request.onerror = (event) => {\r\n                console.error('Database error:', event.target.error);\r\n                reject(event.target.error);\r\n            };\r\n\r\n            request.onsuccess = (event) => {\r\n                resolve(event.target.result);\r\n            };\r\n\r\n            request.onupgradeneeded = (event) => {\r\n                const db = event.target.result;\r\n                if (!db.objectStoreNames.contains(STORE_NAME)) {\r\n                    db.createObjectStore(STORE_NAME, { keyPath: 'key' });\r\n                }\r\n            };\r\n        });\r\n    };\r\n\r\n    const getFromCache = async (key) => {\r\n        try {\r\n            const db = await openDatabase();\r\n            return new Promise((resolve, reject) => {\r\n                const transaction = db.transaction([STORE_NAME], 'readonly');\r\n                const store = transaction.objectStore(STORE_NAME);\r\n                const request = store.get(key);\r\n\r\n                request.onerror = () => reject('Error reading from cache');\r\n                request.onsuccess = () => resolve(request.result ? request.result.value : null);\r\n            });\r\n        } catch (error) {\r\n            console.error('Cache error:', error);\r\n            return null;\r\n        }\r\n    };\r\n\r\n    const saveToCache = async (key, value) => {\r\n        try {\r\n            const db = await openDatabase();\r\n            return new Promise((resolve, reject) => {\r\n                const transaction = db.transaction([STORE_NAME], 'readwrite');\r\n                const store = transaction.objectStore(STORE_NAME);\r\n                const request = store.put({ key, value });\r\n\r\n                request.onerror = () => reject('Error saving to cache');\r\n                request.onsuccess = () => resolve();\r\n            });\r\n        } catch (error) {\r\n            console.error('Cache error:', error);\r\n        }\r\n    };\r\n\r\n    const clearCache = async () => {\r\n        try {\r\n            const db = await openDatabase();\r\n            return new Promise((resolve, reject) => {\r\n                const transaction = db.transaction([STORE_NAME], 'readwrite');\r\n                const store = transaction.objectStore(STORE_NAME);\r\n                const request = store.clear();\r\n\r\n                request.onerror = () => reject('Error clearing cache');\r\n                request.onsuccess = () => resolve();\r\n            });\r\n        } catch (error) {\r\n            console.error('Cache error:', error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const getBlocks = () => {\r\n        if (typeof wp.blocks === 'undefined') {\r\n            return { blocks: [], categories: [] };\r\n        }\r\n\r\n        // Register core blocks if available\r\n        if (wp.blockLibrary && typeof wp.blockLibrary.registerCoreBlocks === 'function') {\r\n            wp.blockLibrary.registerCoreBlocks();\r\n        }\r\n\r\n        let allBlocks = wp.blocks.getBlockTypes();\r\n        let allCategories = wp.blocks.getCategories();\r\n        let listBlocks = [];\r\n\r\n        // Get the category titles from localized data if available\r\n        const localizedCategories = (window.advgb_block_usage_data || {}).blockCategories || [];\r\n        const categoryTitleMap = localizedCategories.reduce((map, cat) => {\r\n            map[cat.slug] = cat.title;\r\n            return map;\r\n        }, {});\r\n\r\n        // Get blocks saved in advgb_block_usage_data.saved_blocks option\r\n        const { saved_blocks = [] } = window.advgb_block_usage_data || {};\r\n        if (saved_blocks.length > 0) {\r\n            const diff_blocks = saved_blocks.filter(\r\n                blocksA => !allBlocks.some(blocksB => blocksA.name === blocksB.name)\r\n            );\r\n            if (diff_blocks.length > 0) {\r\n                allBlocks = [...allBlocks, ...diff_blocks];\r\n            }\r\n        }\r\n\r\n        // Force activate blocks (like widget blocks)\r\n        const force_activate_blocks = [\r\n            {\r\n                'name': 'core/widget-group',\r\n                'icon': 'block-default',\r\n                'title': 'Widget Group',\r\n                'category': 'widgets'\r\n            },\r\n        ];\r\n        allBlocks = [...allBlocks, ...force_activate_blocks];\r\n\r\n        // Additional blocks to include\r\n        const include_blocks = [\r\n            {\r\n                'name': 'core/legacy-widget',\r\n                'icon': 'block-default',\r\n                'title': 'Legacy Widget',\r\n                'category': 'widgets'\r\n            }\r\n        ];\r\n        allBlocks = [...allBlocks, ...include_blocks];\r\n\r\n        // Process all blocks to standardize the format\r\n        allBlocks.forEach(function (block) {\r\n            var blockItemIcon = '';\r\n            const blockItem = {\r\n                name: block.name,\r\n                icon: block.icon.src || block.icon,\r\n                title: block.title,\r\n                category: block.category || 'common',\r\n                parent: block.parent,\r\n                description: block.description || ''\r\n            };\r\n\r\n            // Use the localized category title if available\r\n            if (categoryTitleMap[blockItem.category]) {\r\n                blockItem.categoryTitle = categoryTitleMap[blockItem.category];\r\n            }\r\n\r\n            const savedIcon = !!block.icon.src ? block.icon.src : block.icon;\r\n\r\n            if (block.icon.foreground !== undefined) blockItem.iconColor = block.icon.foreground;\r\n\r\n            if (typeof savedIcon === 'function') {\r\n                if (typeof savedIcon.prototype !== 'undefined') {\r\n                    blockItem.icon = wp.element.renderToString(wp.element.createElement(savedIcon));\r\n                    blockItem.icon = blockItem.icon.replace(/stopcolor/g, 'stop-color');\r\n                    blockItem.icon = blockItem.icon.replace(/stopopacity/g, 'stop-opacity');\r\n                } else {\r\n                    blockItemIcon = wp.element.createElement(wp.components.Dashicon, { icon: 'block-default' });\r\n                    blockItem.icon = wp.element.renderToString(blockItemIcon);\r\n                }\r\n            } else if (typeof savedIcon === 'object') {\r\n                blockItem.icon = wp.element.renderToString(savedIcon);\r\n                blockItem.icon = blockItem.icon.replace(/stopcolor/g, 'stop-color');\r\n                blockItem.icon = blockItem.icon.replace(/stopopacity/g, 'stop-opacity');\r\n            } else if (\r\n                typeof savedIcon === 'string'\r\n                && !savedIcon.includes('<span') // Merged blocks icons from 'advgb_blocks_list' are stored as html\r\n                && !savedIcon.includes('<svg') // Merged blocks icons from 'advgb_blocks_list' are stored as html\r\n            ) {\r\n                blockItemIcon = wp.element.createElement(wp.components.Dashicon, { icon: savedIcon });\r\n                blockItem.icon = wp.element.renderToString(blockItemIcon);\r\n            } else {\r\n                blockItem.icon = savedIcon; // Pure html for merged blocks icons from 'advgb_blocks_list'\r\n            }\r\n\r\n            listBlocks.push(blockItem);\r\n        });\r\n\r\n        // Remove duplicated blocks by block name\r\n        const uniqueNames = [];\r\n        let i = listBlocks.length;\r\n        while (i--) {\r\n            const name = listBlocks[i].name;\r\n            if (uniqueNames.includes(name)) {\r\n                listBlocks.splice(i, 1);\r\n            } else {\r\n                uniqueNames.push(name);\r\n            }\r\n        }\r\n\r\n        // Sort categories to show \"advgb-category\" first\r\n        allCategories.sort((a, b) => {\r\n            if (a.slug === 'advgb-category') return -1;\r\n            if (b.slug === 'advgb-category') return 1;\r\n            return 0;\r\n        });\r\n\r\n        // Add any missing categories from localized data\r\n        localizedCategories.forEach(localizedCat => {\r\n            if (!allCategories.some(cat => cat.slug === localizedCat.slug)) {\r\n                allCategories.push({\r\n                    slug: localizedCat.slug,\r\n                    title: localizedCat.title\r\n                });\r\n            }\r\n        });\r\n\r\n        return {\r\n            blocks: listBlocks,\r\n            categories: allCategories\r\n        };\r\n    };\r\n\r\n    const Sidebar = React.memo(({ selected, data, onClose, canEditPosts }) => {\r\n        const [expandedPost, setExpandedPost] = useState(null);\r\n        const { usage = {}, posts = [] } = data;\r\n\r\n        const blockData = usage[selected?.name] || { posts: {}, total: 0 };\r\n        const postIds = Object.keys(blockData.posts);\r\n\r\n        // Get posts that contain this block\r\n        const blockPosts = useMemo(() => {\r\n            return posts.filter(post => postIds.includes(post.post_id.toString()));\r\n        }, [posts, postIds]);\r\n\r\n        // Group posts by title (for multiple instances in same post)\r\n        const groupedPosts = useMemo(() => {\r\n            const groups = {};\r\n\r\n            blockPosts.forEach(post => {\r\n                const count = blockData.posts[post.post_id]?.count || 0;\r\n                const scanned = blockData.posts[post.post_id]?.scanned || '';\r\n\r\n                const key = `${post.post_title}-${post.post_id}`;\r\n\r\n                if (!groups[key]) {\r\n                    groups[key] = {\r\n                        ...post,\r\n                        totalCount: 0,\r\n                        scanned\r\n                    };\r\n                }\r\n\r\n                groups[key].totalCount += count;\r\n            });\r\n\r\n            return Object.values(groups);\r\n        }, [blockPosts, blockData]);\r\n\r\n        const renderBlockItem = (block, depth = 0) => {\r\n            if (!block.name) return null;\r\n\r\n            return (\r\n                <div\r\n                    key={block.clientId || `${block.name}-${depth}-${Math.random().toString(36).substr(2, 9)}`}\r\n                    className=\"pp-blocks-usage-post-block-item\"\r\n                    style={{ marginLeft: `${depth * 15}px` }}\r\n                >\r\n                    <div className=\"pp-blocks-usage-block-name\">\r\n                        {block.icon && (\r\n                            <span className=\"block-icon\" style={block.iconColor ? { color: block.iconColor } : {}}>\r\n                                {typeof block.icon === 'string' && !block.icon.includes('<') ? (\r\n                                    <span className={`dashicons dashicons-${block.icon}`}></span>\r\n                                ) : (\r\n                                    <span dangerouslySetInnerHTML={{ __html: block.icon }} />\r\n                                )}\r\n                            </span>\r\n                        )}\r\n                        {block.name}\r\n                    </div>\r\n                    {block.innerBlocks?.map(innerBlock => renderBlockItem(innerBlock, depth + 1))}\r\n                </div>\r\n            );\r\n        };\r\n\r\n        return (\r\n            <div className=\"pp-blocks-usage-sidebar\" ref={useRef(null)}>\r\n                <div className=\"pp-blocks-usage-sidebar-header\">\r\n                    <h2>\r\n                        <div className=\"pp-blocks-usage-tile-main\">\r\n                            {selected.icon && (\r\n                                <span className=\"block-icon\" style={selected.iconColor ? { color: selected.iconColor } : {}}>\r\n                                    {typeof selected.icon === 'string' && !selected.icon.includes('<') ? (\r\n                                        <span className={`dashicons dashicons-${selected.icon}`}></span>\r\n                                    ) : (\r\n                                        <span dangerouslySetInnerHTML={{ __html: selected.icon }} />\r\n                                    )}\r\n                                </span>\r\n                            )}\r\n                            <span>{selected.title}</span>\r\n                        </div>\r\n                        <span className=\"pp-blocks-usage-panel-subtitle\">\r\n                            {groupedPosts.length} {__('locations', 'advanced-gutenberg')} | {blockData.total} {__('instances', 'advanced-gutenberg')}\r\n                        </span>\r\n                    </h2>\r\n                </div>\r\n                <div className=\"pp-blocks-usage-sidebar-content\">\r\n                    <div className=\"pp-blocks-usage-block-meta\">\r\n                        <p><strong>{__('Name:', 'advanced-gutenberg')}</strong> {selected.title}</p>\r\n                        <p><strong>{__('Description:', 'advanced-gutenberg')}</strong> {selected.description}</p>\r\n                        <p><strong>{__('Category:', 'advanced-gutenberg')}</strong> {selected.category}</p>\r\n                    </div>\r\n\r\n                    {groupedPosts.length > 0 ? (\r\n                        <>\r\n                            <div className=\"pp-blocks-usage-usage-stats\">\r\n                                <span><strong>{__('Locations:', 'advanced-gutenberg')}</strong> {groupedPosts.length}</span>\r\n                                <span><strong>{__('Total instances:', 'advanced-gutenberg')}</strong> {blockData.total}</span>\r\n                            </div>\r\n\r\n                            <div className=\"pp-blocks-usage-post-list\">\r\n                                {groupedPosts.map((post) => {\r\n                                    const isExpanded = expandedPost === post.post_id;\r\n                                    const postTypeLabel = post.post_type;\r\n\r\n                                    return (\r\n                                        <div key={post.post_id} className={`pp-blocks-usage-post-item ${isExpanded ? 'expanded' : ''}`}>\r\n                                            <div\r\n                                                className=\"pp-blocks-usage-post-header\"\r\n                                                onClick={() => setExpandedPost(isExpanded ? null : post.post_id)}\r\n                                            >\r\n                                                <div className=\"pp-blocks-usage-post-title\">\r\n                                                    {post.post_title}\r\n                                                    <span className=\"pp-blocks-usage-post-count\">\r\n                                                        {selected.name}\r\n                                                    </span>\r\n                                                </div>\r\n                                                <div className=\"pp-blocks-usage-post-meta\">\r\n                                                    <span className=\"pp-blocks-usage-post-type\">\r\n                                                        {postTypeLabel}\r\n                                                    </span>\r\n                                                </div>\r\n                                                <Button\r\n                                                    size=\"small\"\r\n                                                    icon={isExpanded ? 'arrow-up-alt2' : 'arrow-down-alt2'}\r\n                                                    className=\"pp-blocks-usage-expand-button\"\r\n                                                />\r\n                                            </div>\r\n\r\n                                            {isExpanded && (\r\n                                                <div className=\"pp-blocks-usage-post-content\">\r\n                                                    <div className=\"pp-blocks-usage-post-blocks\">\r\n                                                        <h4>{__('Blocks in this post:', 'advanced-gutenberg')}</h4>\r\n                                                        {post.blocks?.length > 0 ? (\r\n                                                            post.blocks.map(block => renderBlockItem(block))\r\n                                                        ) : (\r\n                                                            <p>{__('No blocks found in this post.', 'advanced-gutenberg')}</p>\r\n                                                        )}\r\n                                                    </div>\r\n                                                    <div className=\"pp-blocks-usage-post-actions\">\r\n                                                        {post.edit_link && canEditPosts && (\r\n                                                            <Button\r\n                                                                variant=\"secondary\"\r\n                                                                isSmall\r\n                                                                href={post.edit_link}\r\n                                                                target=\"_blank\"\r\n                                                            >\r\n                                                                {__('Edit Post', 'advanced-gutenberg')}\r\n                                                            </Button>\r\n                                                        )}\r\n                                                        <Button\r\n                                                            variant=\"secondary\"\r\n                                                            size=\"small\"\r\n                                                            href={post.view_link}\r\n                                                            target=\"_blank\"\r\n                                                        >\r\n                                                            {__('View Post', 'advanced-gutenberg')}\r\n                                                        </Button>\r\n                                                    </div>\r\n                                                </div>\r\n                                            )}\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </>\r\n                    ) : (\r\n                        <div className=\"pp-blocks-usage-no-results\">\r\n                            {data.lastScanDate ? (\r\n                                <>\r\n                                    <p><em>{__('This block was not found in any posts.', 'advanced-gutenberg')}</em></p>\r\n                                    <p>{__('Last scan:', 'advanced-gutenberg')} {new Date(data.lastScanDate).toLocaleString()}</p>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <p><em>{__('No scan history available for this block.', 'advanced-gutenberg')}</em></p>\r\n                                    <p>{__('Click the Scan button to check for usage.', 'advanced-gutenberg')}</p>\r\n                                </>\r\n                            )}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    const App = () => {\r\n        const {\r\n            ajaxUrl = '',\r\n            nonce = '',\r\n            initialData,\r\n            currentUser\r\n        } = window.advgb_block_usage_data || {};\r\n\r\n        const [blocksData, setBlocksData] = useState(() => getBlocks());\r\n        const [data, setData] = useState(initialData);\r\n        const [loadingAll, setLoadingAll] = useState(false);\r\n        const [loadingClearAll, setLoadingClearAll] = useState(false);\r\n        const [selected, setSelected] = useState(null);\r\n        const [showEmptyBlocks, setShowEmptyBlocks] = useState(true);\r\n        const [scanProgress, setScanProgress] = useState({\r\n            current: 0,\r\n            total: 0,\r\n            status: '',\r\n            completed: false\r\n        });\r\n        const [dbError, setDbError] = useState(null);\r\n        const [initialLoadComplete, setInitialLoadComplete] = useState(false);\r\n\r\n        // Load data from IndexedDB on initial render\r\n        useEffect(() => {\r\n            const loadData = async () => {\r\n                try {\r\n                    const cachedData = await getFromCache('block_usage_data');\r\n                    const cachedSettings = await getFromCache('block_usage_settings');\r\n\r\n                    if (cachedData) {\r\n                        setData(cachedData);\r\n                    }\r\n\r\n                    if (cachedSettings) {\r\n                        setShowEmptyBlocks(cachedSettings.showEmptyBlocks !== false);\r\n\r\n                        if (cachedSettings.lastSelectedBlock) {\r\n                            const lastSelected = blocksData.blocks.find(b => b.name === cachedSettings.lastSelectedBlock);\r\n                            if (lastSelected) {\r\n                                setSelected(lastSelected);\r\n                            }\r\n                        }\r\n                    }\r\n                    setInitialLoadComplete(true);\r\n                } catch (error) {\r\n                    console.error('Failed to load data from IndexedDB:', error);\r\n                    setDbError(__('Failed to load data from local storage. Please refresh the page.', 'advanced-gutenberg'));\r\n                    setInitialLoadComplete(true);\r\n                }\r\n            };\r\n\r\n            loadData();\r\n        }, [blocksData.blocks]);\r\n\r\n        const postAjax = (action, data = {}) => {\r\n            const body = new URLSearchParams({ action, nonce, ...data });\r\n            return fetch(ajaxUrl, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n                body,\r\n            }).then(r => r.json());\r\n        };\r\n\r\n        const handleToggleChange = async (value) => {\r\n            setShowEmptyBlocks(value);\r\n            try {\r\n                await saveToCache('block_usage_settings', {\r\n                    showEmptyBlocks: value,\r\n                    lastSelectedBlock: selected?.name || ''\r\n                });\r\n            } catch (error) {\r\n                console.error('Failed to save showEmptyBlocks setting:', error);\r\n            }\r\n        };\r\n\r\n        const categories = useMemo(() => {\r\n            const cats = {};\r\n\r\n            // First create the advgb-category if it exists\r\n            const advgbCategory = blocksData.categories.find(cat => cat.slug === 'advgb-category');\r\n            if (advgbCategory) {\r\n                cats[advgbCategory.slug] = {\r\n                    title: advgbCategory.title,\r\n                    blocks: []\r\n                };\r\n            }\r\n\r\n            // Then add all other categories\r\n            blocksData.categories.forEach(cat => {\r\n                if (cat.slug !== 'advgb-category') {\r\n                    cats[cat.slug] = {\r\n                        title: cat.title,\r\n                        blocks: []\r\n                    };\r\n                }\r\n            });\r\n\r\n            // Assign blocks to categories\r\n            blocksData.blocks.forEach(block => {\r\n                const catSlug = block.category || 'common';\r\n                if (!cats[catSlug]) {\r\n                    cats[catSlug] = {\r\n                        title: block.categoryTitle || catSlug,\r\n                        blocks: []\r\n                    };\r\n                }\r\n                cats[catSlug].blocks.push(block);\r\n            });\r\n\r\n            return cats;\r\n        }, [blocksData.categories, blocksData.blocks]);\r\n\r\n        const filteredCategories = useMemo(() => {\r\n            if (showEmptyBlocks) return categories;\r\n\r\n            const filtered = {};\r\n            Object.entries(categories).forEach(([slug, category]) => {\r\n                const filteredBlocks = category.blocks.filter(bt => {\r\n                    return data.usage[bt.name] && Object.keys(data.usage[bt.name].posts).length > 0;\r\n                });\r\n\r\n                if (filteredBlocks.length > 0) {\r\n                    filtered[slug] = {\r\n                        ...category,\r\n                        blocks: filteredBlocks\r\n                    };\r\n                }\r\n            });\r\n\r\n            return filtered;\r\n        }, [categories, data.usage, showEmptyBlocks]);\r\n\r\n        useEffect(() => {\r\n            if (!selected && blocksData.blocks.length > 0 && initialLoadComplete) {\r\n                const firstCategory = Object.values(filteredCategories)[0];\r\n                if (firstCategory && firstCategory.blocks.length > 0) {\r\n                    setSelected(firstCategory.blocks[0]);\r\n                }\r\n            }\r\n        }, [filteredCategories, blocksData.blocks, initialLoadComplete]);\r\n\r\n        const scanAll = async () => {\r\n            setLoadingAll(true);\r\n            setScanProgress({\r\n                current: 0,\r\n                total: 0,\r\n                status: __('Initializing scan...', 'advanced-gutenberg'),\r\n                completed: false\r\n            });\r\n\r\n            try {\r\n                let offset = 0;\r\n                const batchSize = 20;\r\n                let newData = {\r\n                    usage: {},\r\n                    posts: [],\r\n                    lastScanDate: ''\r\n                };\r\n                let totalPosts = 0;\r\n                let hasMorePosts = true;\r\n\r\n                while (hasMorePosts) {\r\n                    setScanProgress(prev => ({\r\n                        ...prev,\r\n                        status: sprintf(\r\n                            __('Processing posts (%1$d/%2$d)', 'advanced-gutenberg'),\r\n                            offset,\r\n                            totalPosts\r\n                        )\r\n                    }));\r\n\r\n                    const batchResponse = await postAjax('pp_blocks-usage_scan_batch', {\r\n                        offset,\r\n                        batch_size: batchSize\r\n                    });\r\n\r\n                    if (!batchResponse.success) {\r\n                        throw new Error(__('Batch scan failed', 'advanced-gutenberg'));\r\n                    }\r\n\r\n                    if (batchResponse.data.total) {\r\n                        totalPosts = batchResponse.data.total;\r\n                    }\r\n\r\n                    // Merge usage data\r\n                    Object.entries(batchResponse.data.usage || {}).forEach(([blockName, blockData]) => {\r\n                        if (!newData.usage[blockName]) {\r\n                            newData.usage[blockName] = {\r\n                                posts: {},\r\n                                total: 0\r\n                            };\r\n                        }\r\n\r\n                        Object.entries(blockData.posts || {}).forEach(([postId, entry]) => {\r\n                            newData.usage[blockName].posts[postId] = entry;\r\n                        });\r\n\r\n                        newData.usage[blockName].total += blockData.total || 0;\r\n                    });\r\n\r\n                    // Merge posts\r\n                    newData.posts = [...newData.posts, ...(batchResponse.data.posts || [])];\r\n                    newData.lastScanDate = batchResponse.data.lastScanDate || newData.lastScanDate;\r\n\r\n                    offset += batchResponse.data.processed || 0;\r\n                    hasMorePosts = offset < totalPosts;\r\n\r\n                    setScanProgress(prev => ({\r\n                        ...prev,\r\n                        current: offset,\r\n                        total: totalPosts\r\n                    }));\r\n\r\n                    // Update local state with the new data\r\n                    setData(newData);\r\n\r\n                    // Save to IndexedDB after each batch\r\n                    try {\r\n                        await saveToCache('block_usage_data', newData);\r\n                    } catch (error) {\r\n                        console.error('Failed to save batch to IndexedDB:', error);\r\n                        // Continue with next batch even if save fails\r\n                    }\r\n\r\n                    await new Promise(resolve => setTimeout(resolve, 100));\r\n                }\r\n\r\n                setScanProgress(prev => ({\r\n                    ...prev,\r\n                    completed: true,\r\n                    status: __('Scan completed successfully!', 'advanced-gutenberg')\r\n                }));\r\n            } catch (error) {\r\n                console.error('Scan error:', error);\r\n                setScanProgress(prev => ({\r\n                    ...prev,\r\n                    status: __('Scan failed: ', 'advanced-gutenberg') + error.message\r\n                }));\r\n            } finally {\r\n                setTimeout(() => {\r\n                    setLoadingAll(false);\r\n                    setScanProgress({\r\n                        current: 0,\r\n                        total: 0,\r\n                        status: '',\r\n                        completed: false\r\n                    });\r\n                }, 2000);\r\n            }\r\n        };\r\n\r\n        const clearAllData = async () => {\r\n            setLoadingClearAll(true);\r\n            try {\r\n                await clearCache();\r\n                setData({\r\n                    usage: {},\r\n                    posts: [],\r\n                    lastScanDate: ''\r\n                });\r\n                setShowEmptyBlocks(true);\r\n                setSelected(null);\r\n\r\n                // Clear settings as well\r\n                await saveToCache('block_usage_settings', {\r\n                    showEmptyBlocks: true,\r\n                    lastSelectedBlock: ''\r\n                });\r\n            } catch (error) {\r\n                console.error('Failed to clear data:', error);\r\n                setDbError(__('Failed to clear data. Please try again.', 'advanced-gutenberg'));\r\n            } finally {\r\n                setLoadingClearAll(false);\r\n            }\r\n        };\r\n\r\n        const handleDetailsClick = async (bt) => {\r\n            const newSelected = selected?.name === bt.name ? null : bt;\r\n            setSelected(newSelected);\r\n\r\n            // Save the last selected block\r\n            if (newSelected) {\r\n                try {\r\n                    await saveToCache('block_usage_settings', {\r\n                        showEmptyBlocks,\r\n                        lastSelectedBlock: newSelected.name\r\n                    });\r\n                } catch (error) {\r\n                    console.error('Failed to save last selected block:', error);\r\n                }\r\n            }\r\n        };\r\n\r\n        if (!initialLoadComplete) {\r\n            return (\r\n                <div className=\"pp-blocks-usage-wrapper\">\r\n                    <div className=\"advgb-block-feature-loading-msg\" style={{ display: 'block' }}>\r\n                        {__('Loading...', 'advanced-gutenberg')} <Spinner />\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className={`pp-blocks-usage-wrapper ${selected ? 'has-sidebar' : ''}`}>\r\n                {dbError && (\r\n                    <Notice status=\"error\" onRemove={() => setDbError(null)}>\r\n                        {dbError}\r\n                    </Notice>\r\n                )}\r\n\r\n                <div className=\"pp-blocks-usage-header\">\r\n                    <Flex justify=\"space-between\" align=\"center\">\r\n                        <FlexItem>\r\n                            <Button variant=\"primary\" onClick={scanAll} disabled={loadingAll}>\r\n                                {loadingAll ? <Spinner /> : __('Scan Block Usage', 'advanced-gutenberg')}\r\n                            </Button>\r\n                        </FlexItem>\r\n                        <FlexItem>\r\n                            <div className=\"advgb-toggle-wrapper\">\r\n                                {__('Show empty blocks', 'advanced-gutenberg')}\r\n                                <div className=\"advgb-switch-button\">\r\n                                    <label className=\"switch\">\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            name=\"toggle_empty_blocks\"\r\n                                            id=\"toggle_empty_blocks\"\r\n                                            checked={showEmptyBlocks}\r\n                                            onChange={(e) => handleToggleChange(e.target.checked)}\r\n                                        />\r\n                                        <span className=\"slider\"></span>\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                        </FlexItem>\r\n                    </Flex>\r\n                </div>\r\n\r\n                {loadingAll && (\r\n                    <div className=\"scan-progress-container\">\r\n                        <div className=\"scan-progress\">\r\n                            <p>{scanProgress.status}</p>\r\n                            <div className=\"progress-wrap\"><ProgressBar\r\n                                value={scanProgress.total > 0 ? (scanProgress.current / scanProgress.total) * 100 : 0}\r\n                            /></div>\r\n                            {scanProgress.total > 0 && (\r\n                                <p>{__('Processed:', 'advanced-gutenberg')} {scanProgress.current} / {scanProgress.total}</p>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                {data.lastScanDate && (\r\n                    <div className=\"pp-blocks-usage-last-scan\">\r\n                        <span>{__('Last scan:', 'advanced-gutenberg')} {new Date(data.lastScanDate).toLocaleString()}</span>\r\n                        <div className=\"pp-tooltips-library\" data-toggle=\"tooltip\" data-placement=\"left\">\r\n                            {!loadingClearAll &&\r\n                                <span className=\"dashicons dashicons-editor-help\" style={{ verticalAlign: 'middle', lineHeight: 'inherit' }}></span>\r\n                            }\r\n                            <Button\r\n                                variant=\"secondary\"\r\n                                onClick={clearAllData}\r\n                                disabled={loadingAll || loadingClearAll}\r\n                                className=\"is-destructive\"\r\n                                style={{ marginLeft: '8px' }}\r\n                            >\r\n                                {loadingClearAll ? <Spinner /> : __('Clear All Data', 'advanced-gutenberg')}\r\n                            </Button>\r\n                            {!loadingClearAll &&\r\n                                <span className=\"tooltip-text\">\r\n                                    <span>{__('Scan data is stored in your browser\\'s IndexedDB storage to improve performance and handle large datasets. This keeps your WordPress database clean. Click to permanently delete all scan data.', 'advanced-gutenberg')}</span>\r\n                                    <i></i>\r\n                                </span>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                <div className=\"pp-blocks-usage-container\">\r\n                    <div className=\"pp-blocks-usage-categories\">\r\n                        {Object.entries(filteredCategories).map(([slug, { title, blocks }]) => (\r\n                            <PanelBody key={slug} title={title} initialOpen>\r\n                                <div className=\"pp-blocks-usage-block-grid\">\r\n                                    {blocks.map(bt => {\r\n                                        const hasData = data.usage[bt.name] && Object.keys(data.usage[bt.name].posts).length > 0;\r\n                                        const blockData = data.usage[bt.name] || { posts: {}, total: 0 };\r\n                                        const postCount = Object.keys(blockData.posts).length;\r\n                                        const useCount = blockData.total;\r\n                                        const lastScanned = Object.values(blockData.posts)[0]?.scanned || '';\r\n\r\n                                        return (\r\n                                            <Card\r\n                                                key={bt.name}\r\n                                                className={`pp-blocks-usage-block-tile ${selected?.name === bt.name ? 'active' : ''}`}\r\n                                                onClick={() => handleDetailsClick(bt)}\r\n                                            >\r\n                                                <div className=\"pp-blocks-usage-tile-main\">\r\n                                                    {bt.icon && (\r\n                                                        <span className=\"block-icon\" style={bt.iconColor ? { color: bt.iconColor } : {}}>\r\n                                                            {typeof bt.icon === 'string' && !bt.icon.includes('<') ? (\r\n                                                                <span className={`dashicons dashicons-${bt.icon}`}></span>\r\n                                                            ) : (\r\n                                                                <span dangerouslySetInnerHTML={{ __html: bt.icon }} />\r\n                                                            )}\r\n                                                        </span>\r\n                                                    )}\r\n                                                    <span>{bt.title}</span>\r\n                                                </div>\r\n                                                {hasData ? (\r\n                                                    <div className=\"pp-blocks-usage-tile-counts\">\r\n                                                        <div>{__('Locations:', 'advanced-gutenberg')} {postCount}</div>\r\n                                                        <div>{__('Instances:', 'advanced-gutenberg')} {useCount}</div>\r\n                                                        {lastScanned && (\r\n                                                            <div className=\"scan-date\">\r\n                                                                {__('Last:', 'advanced-gutenberg')} {new Date(lastScanned).toLocaleString()}\r\n                                                            </div>\r\n                                                        )}\r\n                                                    </div>\r\n                                                ) : (\r\n                                                    <div className=\"pp-blocks-usage-tile-counts\">\r\n                                                        <div className=\"no-scan\">\r\n                                                            {data.lastScanDate\r\n                                                                ? __('Not found in any posts', 'advanced-gutenberg')\r\n                                                                : __('No scan history', 'advanced-gutenberg')}\r\n                                                        </div>\r\n                                                    </div>\r\n                                                )}\r\n                                                <div className=\"pp-blocks-usage-tile-actions\">\r\n                                                    <Button variant=\"secondary\" size=\"small\" onClick={(e) => {\r\n                                                        e.stopPropagation();\r\n                                                        handleDetailsClick(bt);\r\n                                                    }}>\r\n                                                        {__('Details', 'advanced-gutenberg')}\r\n                                                    </Button>\r\n                                                </div>\r\n                                            </Card>\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n                            </PanelBody>\r\n                        ))}\r\n                    </div>\r\n\r\n                    {selected && (\r\n                        <Sidebar\r\n                            key={selected.name}\r\n                            selected={selected}\r\n                            data={data}\r\n                            onClose={() => setSelected(null)}\r\n                            canEditPosts={currentUser?.canEditPosts || false}\r\n                        />\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    // Only render the app if wp.blocks is available\r\n    if (typeof wp !== 'undefined' && typeof wp.blocks !== 'undefined') {\r\n        render(<App />, document.getElementById('advgb-block-usage-app'));\r\n    } else {\r\n        const appContainer = document.getElementById('advgb-block-usage-app');\r\n        if (appContainer) {\r\n            appContainer.innerHTML = '<p>' + __('Error Loading blocks data...', 'advanced-gutenberg') + '</p>';\r\n        }\r\n    }\r\n\r\n})(wp.i18n, wp.hooks, wp.blocks, wp.blockEditor, wp.components, wp.compose, wp.element);"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","wpI18n","wpHooks","wpBlocks","wpBlockEditor","wpComponents","wpCompose","wpElement","render","useState","useEffect","useRef","useMemo","PanelBody","Button","Card","Spinner","Flex","FlexItem","ProgressBar","Notice","__","sprintf","STORE_NAME","openDatabase","reject","request","indexedDB","open","onerror","event","console","error","target","onsuccess","result","onupgradeneeded","db","objectStoreNames","contains","createObjectStore","keyPath","getFromCache","_ref","_callee","key","_context","transaction","objectStore","get","t0","_x","saveToCache","_ref2","_callee2","_context2","put","_x2","_x3","clearCache","_ref3","_callee3","_context3","clear","Sidebar","React","memo","_ref5","selected","data","canEditPosts","onClose","_useState2","_slicedToArray","expandedPost","setExpandedPost","_data$usage","usage","_data$posts","posts","blockData","total","postIds","blockPosts","filter","post","includes","post_id","toString","groupedPosts","groups","_blockData$posts$post","_blockData$posts$post2","count","scanned","concat","post_title","_objectSpread","totalCount","renderBlockItem","block","_block$innerBlocks","depth","undefined","createElement","clientId","Math","random","substr","className","style","marginLeft","icon","iconColor","color","dangerouslySetInnerHTML","__html","innerBlocks","map","innerBlock","ref","title","description","category","Fragment","_post$blocks","isExpanded","postTypeLabel","post_type","onClick","size","blocks","edit_link","variant","isSmall","href","view_link","lastScanDate","Date","toLocaleString","App","_ref6","window","advgb_block_usage_data","_ref6$ajaxUrl","ajaxUrl","_ref6$nonce","nonce","initialData","currentUser","_useState4","wp","categories","blockLibrary","registerCoreBlocks","allBlocks","getBlockTypes","allCategories","getCategories","listBlocks","localizedCategories","blockCategories","categoryTitleMap","reduce","cat","slug","_ref4$saved_blocks","saved_blocks","diff_blocks","blocksA","some","blocksB","_toConsumableArray","blockItemIcon","blockItem","src","parent","categoryTitle","savedIcon","foreground","element","renderToString","replace","components","Dashicon","uniqueNames","splice","sort","b","localizedCat","getBlocks","blocksData","_useState6","setData","_useState8","loadingAll","setLoadingAll","_useState10","loadingClearAll","setLoadingClearAll","_useState12","setSelected","_useState14","showEmptyBlocks","setShowEmptyBlocks","_useState16","current","status","completed","scanProgress","setScanProgress","_useState18","dbError","setDbError","_useState20","initialLoadComplete","setInitialLoadComplete","loadData","_ref7","_callee4","cachedData","cachedSettings","lastSelected","_context4","lastSelectedBlock","find","postAjax","action","body","URLSearchParams","fetch","headers","json","handleToggleChange","_ref8","_callee5","_context5","_x4","cats","advgbCategory","catSlug","filteredCategories","filtered","entries","_ref9","_ref10","filteredBlocks","bt","firstCategory","scanAll","_ref11","_callee6","offset","batchSize","newData","totalPosts","hasMorePosts","batchResponse","_context6","batch_size","success","_ref12","_ref13","blockName","_ref14","_ref15","postId","entry","processed","setTimeout","t1","message","clearAllData","_ref16","_callee7","_context7","handleDetailsClick","_ref17","_callee8","newSelected","_context8","_x5","onRemove","justify","align","disabled","id","checked","onChange","verticalAlign","lineHeight","_ref18","_ref19","_ref19$","initialOpen","_Object$values$","hasData","postCount","useCount","lastScanned","stopPropagation","display","document","getElementById","appContainer","innerHTML","i18n","hooks","blockEditor","compose"],"sourceRoot":""}