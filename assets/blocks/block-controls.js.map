{"version":3,"file":"block-controls.js","mappings":"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","sources":["webpack://advanced-gutenberg/./node_modules/hour-convert/index.js","webpack://advanced-gutenberg/./node_modules/classnames/index.js","webpack://advanced-gutenberg/webpack/bootstrap","webpack://advanced-gutenberg/webpack/runtime/compat get default export","webpack://advanced-gutenberg/webpack/runtime/define property getters","webpack://advanced-gutenberg/webpack/runtime/hasOwnProperty shorthand","webpack://advanced-gutenberg/./assets/blocks/0-adv-components/datetime.jsx","webpack://advanced-gutenberg/./assets/blocks/0-adv-components/utils.jsx","webpack://advanced-gutenberg/./assets/blocks/block-controls/block-controls.jsx"],"sourcesContent":["'use strict';\n\nmodule.exports = {\n\n    /**\n     * Convert 24-hour time to 12-hour format.\n     *\n     * @param {number} hour Hour to convert (0-23)\n     * @return {object} { hour, meridiem } (meridian is also returned for backwards compatibility)\n     */\n    to12Hour: function to12Hour(hour) {\n        var meridiem = hour < 12 ? 'am' : 'pm';\n        return {\n            hour: ((hour + 11) % 12 + 1),\n            meridiem: meridiem,\n            meridian: meridiem\n        };\n    },\n\n    /**\n     * Convert 12-hour time to 24-hour format.\n     *\n     * @param {object} time Time object\n     * @param {number} time.hour Hour to convert (1-12)\n     * @param {string} time.meridiem Hour meridiem (am/pm). 'time.meridian' is\n     *  supported for backwards compatibility.\n     * @return {number}\n     */\n    to24Hour: function to24Hour(time) {\n        var meridiem = time.meridiem || time.meridian;\n        return (meridiem === 'am' ? 0 : 12) + (time.hour % 12);\n    }\n};\n","/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = '';\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (arg) {\n\t\t\t\tclasses = appendClass(classes, parseValue(arg));\n\t\t\t}\n\t\t}\n\n\t\treturn classes;\n\t}\n\n\tfunction parseValue (arg) {\n\t\tif (typeof arg === 'string' || typeof arg === 'number') {\n\t\t\treturn arg;\n\t\t}\n\n\t\tif (typeof arg !== 'object') {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (Array.isArray(arg)) {\n\t\t\treturn classNames.apply(null, arg);\n\t\t}\n\n\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\treturn arg.toString();\n\t\t}\n\n\t\tvar classes = '';\n\n\t\tfor (var key in arg) {\n\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\tclasses = appendClass(classes, key);\n\t\t\t}\n\t\t}\n\n\t\treturn classes;\n\t}\n\n\tfunction appendClass (value, newClass) {\n\t\tif (!newClass) {\n\t\t\treturn value;\n\t\t}\n\t\n\t\tif (value) {\n\t\t\treturn value + ' ' + newClass;\n\t\t}\n\t\n\t\treturn value + newClass;\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import hourConvert from 'hour-convert';\r\n\r\nconst { ButtonGroup, Button, DateTimePicker, TextControl, CheckboxControl, Popover, Tooltip, SelectControl, Icon } = wp.components;\r\nconst { Component, Fragment, useState } = wp.element;\r\nconst { __, _x } = wp.i18n;\r\nconst { applyFilters } = wp.hooks;\r\n\r\nexport function AdvDateTimeControl(props) {\r\n    const [popupState, setPopupState] = useState( false );\r\n    const togglePopup = () => {\r\n        setPopupState( ! popupState );\r\n    };\r\n\r\n    const {\r\n        buttonLabel,\r\n        dateLabel,\r\n        date,\r\n        onChangeDate,\r\n        onDateClear,\r\n        onInvalidDate,\r\n        placement,\r\n        offset\r\n    } = props;\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"advgb-advcalendar-control\">\r\n                <label>\r\n                    { dateLabel }\r\n                </label>\r\n                <div>\r\n                    <Button\r\n                        isLink\r\n                        icon=\"calendar\"\r\n                        onClick={ togglePopup }\r\n                    >\r\n                        <Tooltip text={ __( 'Change date', 'advanced-gutenberg' ) }>\r\n                            <span>\r\n                                { date ? moment( date ).format( \"MMMM DD YYYY, h:mm a\" ) : buttonLabel }\r\n                            </span>\r\n                        </Tooltip>\r\n                    </Button>\r\n                    { date &&\r\n        \t\t\t\t<Button\r\n        \t\t\t\t\ticon=\"no-alt\"\r\n                            className=\"advgb-advcalendar-remove-icon\"\r\n        \t\t\t\t\tonClick={ () => onDateClear() }\r\n        \t\t\t\t/>\r\n        \t\t\t}\r\n                </div>\r\n            </div>\r\n            { popupState &&\r\n                <Popover\r\n                    className=\"advgb-advcalendar-popover\"\r\n                    onClose={ setPopupState.bind( null, false ) }\r\n                    resize={ false }\r\n                    placement={ placement }\r\n                    offset={ offset }\r\n                >\r\n                    <label className=\"advgb-advcalendar-popover-label\">\r\n                        { dateLabel }\r\n                        <Button\r\n        \t\t\t\t\ticon=\"no-alt\"\r\n                            className=\"advgb-advcalendar-remove-icon\"\r\n        \t\t\t\t\tonClick={ togglePopup }\r\n        \t\t\t\t/>\r\n                    </label>\r\n                    <DateTimePicker\r\n                        currentDate={ date }\r\n                        onChange={ onChangeDate }\r\n                        is12Hour={ true }\r\n                        isInvalidDate={ onInvalidDate }\r\n                    />\r\n                </Popover>\r\n            }\r\n        </Fragment>\r\n\r\n    )\r\n}\r\n\r\nAdvDateTimeControl.defaultProps = {\r\n    placement: 'left',\r\n    offset: 40\r\n}\r\n\r\nexport function AdvDaysControl(props) {\r\n    const allDays = [\r\n        { slug: 0, label: _x( 'S', 'Sunday first letter', 'advanced-gutenberg' ) }, // Sunday\r\n        { slug: 1, label: __( 'M', 'advanced-gutenberg' ) }, // Monday\r\n        { slug: 2, label: _x( 'T', 'Tuesday first letter', 'advanced-gutenberg' ) }, // Tuesday\r\n        { slug: 3, label: __( 'W', 'advanced-gutenberg' ) }, // Wednesday\r\n        { slug: 4, label: _x( 'T', 'Thursday first letter', 'advanced-gutenberg' ) }, // Thursday\r\n        { slug: 5, label: __( 'F', 'advanced-gutenberg' ) }, // Friday\r\n        { slug: 6, label: _x( 'S', 'Saturday first letter', 'advanced-gutenberg' ) }  // Saturday\r\n    ];\r\n\r\n    const {\r\n        label,\r\n        days,\r\n        onChangeDays\r\n    } = props;\r\n\r\n    // Use a single state variable to store the selected days\r\n    const [ selectedDays, setSelectedDays ] = useState( days );\r\n\r\n    /**\r\n    * Check if the day is selected or not\r\n    *\r\n    * @since 3.1.2\r\n    *\r\n    * @param {string} Day slug e.g. 'u' for Sunday, 't' for Tuesday\r\n    *\r\n    * @return {bool}\r\n    */\r\n    function isDaySelected( slug ) {\r\n        return selectedDays.some( el => el === slug );\r\n    }\r\n\r\n    /**\r\n    * Update the selected days state when a checkbox is changed\r\n    *\r\n    * @since 3.1.2\r\n    *\r\n    * @param {string} Day slug e.g. 'u' for Sunday, 't' for Tuesday\r\n    *\r\n    * @return {void}\r\n    */\r\n    function onChangeDay( slug ) {\r\n\r\n        // Check if the day is already selected\r\n        const isSelected = isDaySelected( slug );\r\n\r\n        // Create a new array with the updated selection\r\n        let updatedDays;\r\n        if ( isSelected ) {\r\n            // Remove the day from the selected days\r\n            updatedDays = selectedDays.filter( el => el !== slug );\r\n        } else {\r\n            // Add the day to the selected days\r\n            const findDay = allDays.find( el => el.slug === slug );\r\n            updatedDays = [ ...selectedDays, findDay.slug ];\r\n        }\r\n\r\n        // Remove duplicates\r\n        const uniqueDays = [ ...new Set( updatedDays ) ];\r\n\r\n        // Update the selected days state\r\n        setSelectedDays( uniqueDays );\r\n\r\n        // Call the onChangeDays prop to notify the parent component of the change\r\n        if ( onChangeDays ) {\r\n            onChangeDays( updatedDays );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"advgb-checkbox-wrapper\">\r\n                <label>\r\n                    { label }\r\n                </label>\r\n                <div className=\"advgb-checkbox-inline\">\r\n                    { allDays.map( day => (\r\n                        <CheckboxControl\r\n                            label={ day.label }\r\n                            checked={ isDaySelected( day.slug ) }\r\n                            onChange={ () => onChangeDay( day.slug ) }\r\n                        />\r\n                    ) ) }\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nclass AdvTimeClass extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            onChangeTime: null,\r\n            currentTime: this.props.currentTime || null,\r\n            hours: null,\r\n            minutes: null,\r\n            meridian: 'am',\r\n            onInit: true\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n        const { onChangeTime, currentTime, onInit } = this.state;\r\n\r\n        if( this.props.onChangeTime !== onChangeTime ) {\r\n            this.setState( {\r\n                onChangeTime: this.props.onChangeTime,\r\n            } );\r\n        }\r\n\r\n        if( this.props.currentTime !== currentTime ) {\r\n            this.setState( {\r\n                currentTime: this.props.currentTime,\r\n            } );\r\n        }\r\n\r\n        // Init\r\n        if( currentTime && currentTime.includes(':') && onInit ) {\r\n            this.setState( {\r\n                hours:      currentTime.split(':')[0],\r\n                minutes:    currentTime.split(':')[1],\r\n                meridian:   parseInt( currentTime.split(':')[0] ) > 11 ? 'pm' : 'am', // We set > 11 because PM starts from 12:00:00\r\n                onInit:     false\r\n            } );\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const { onChangeTime, currentTime } = this.props;\r\n        const { hours, minutes, meridian } = this.state;\r\n        const { hours: prevHours, minutes: prevMinutes, meridian: prevMeridian } = prevState;\r\n\r\n        if( hours !== prevHours || minutes !== prevMinutes || meridian !== prevMeridian ) {\r\n\r\n            // When clearing time\r\n            if( ! hours && ! minutes ) {\r\n                return;\r\n            }\r\n\r\n            // Default minutes when hours selected\r\n            if( hours && ! minutes ) {\r\n                this.setState( {\r\n                    minutes: '00'\r\n                } );\r\n            }\r\n\r\n            // Default hours when minutes selected\r\n            if( minutes && ! hours ) {\r\n                this.setState( {\r\n                    hours: '01'\r\n                } );\r\n            }\r\n\r\n            /* Convert 12-hours to 24-hours.\r\n             * e.g. 12:00 AM becomes 00:00:00\r\n             *      12:00 PM becomes 12:00:00\r\n             *      01:00 PM becomes 13:00:00\r\n             */\r\n            const savedTime   = `${this.appendZero(\r\n                                    hourConvert.to24Hour( {\r\n                                        hour: parseInt( hours ),\r\n                                        meridiem: meridian\r\n                                    } )\r\n                                )}:${minutes}:00`;\r\n\r\n            // Value saved in source/attribute\r\n            this.props.onChangeTime( savedTime );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Append zero to one digit numbers. e.g. 9 becomes '09'\r\n     *\r\n     * @since 3.1.2\r\n     *\r\n     * @param {string value Hours or minutes\r\n     *\r\n     * @return {string}\r\n     */\r\n    appendZero( value ) {\r\n        if( isNaN( value ) ) {\r\n            return;\r\n        }\r\n\r\n        const res = parseInt( value );\r\n\r\n        return res > 9 ? res : `0${res}`;\r\n    }\r\n\r\n    render() {\r\n        const { onChangeTime, currentTime, hours, minutes, meridian } = this.state;\r\n\r\n        // Make sure hours are valid. 01: min, 12: max\r\n        const handleChangeHours = event => {\r\n            const value = Math.max( 1, Math.min( 12, Number( event.target.value ) ) );\r\n            this.setState( {\r\n                hours: this.appendZero( value )\r\n            } );\r\n        };\r\n\r\n        // Allow to use up/down keys for hours\r\n        const handleKeyDownHours = event => {\r\n            const value = Number( event.target.value );\r\n            if( event.key === 'ArrowUp' && value < 12 ) {\r\n                this.setState( {\r\n                    hours: this.appendZero( value + 1 )\r\n                } );\r\n            } else if ( event.key === 'ArrowDown' && value > 1 ) {\r\n                this.setState( {\r\n                    hours: this.appendZero( value - 1 )\r\n                } );\r\n            }\r\n        };\r\n\r\n        // Make sure minutes are valid. 01: min, 59: max\r\n        const handleChangeMinutes = event => {\r\n            const value = Math.max( 0, Math.min( 59, Number( event.target.value ) ) );\r\n            this.setState( {\r\n                minutes: this.appendZero( value )\r\n            } );\r\n        };\r\n\r\n        // Allow to use up/down keys for minutes\r\n        const handleKeyDownMinutes = event => {\r\n            const value = Number( event.target.value );\r\n            if( event.key === 'ArrowUp' && value < 59 ) {\r\n                this.setState( {\r\n                    minutes: this.appendZero( value + 1 )\r\n                } );\r\n            } else if ( event.key === 'ArrowDown' && value > 0 ) {\r\n                this.setState( {\r\n                    minutes: this.appendZero( value - 1 )\r\n                } );\r\n            }\r\n        };\r\n\r\n        return (\r\n            <Fragment>\r\n                <div className=\"advgb-advtime-control\">\r\n                    <label>\r\n                        { this.props.label }\r\n                    </label>\r\n                    <div className=\"advgb-advtime-hours-minutes\">\r\n                        <input\r\n                            type=\"text\"\r\n                            value={\r\n                                hours\r\n                                    ? this.appendZero(\r\n                                        hourConvert.to12Hour( parseInt( hours ) ).hour\r\n                                    ) : ''\r\n                            }\r\n                            onChange={ handleChangeHours }\r\n                            onKeyDown={ handleKeyDownHours }\r\n                            placeholder=\"--\"\r\n                        />\r\n                        <span>:</span>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={\r\n                                minutes ? minutes : ''\r\n                            }\r\n                            onChange={ handleChangeMinutes }\r\n                            onKeyDown={ handleKeyDownMinutes }\r\n                            placeholder=\"--\"\r\n                        />\r\n                    </div>\r\n                    <ButtonGroup className=\"advgb-advtime-meridian\">\r\n                        <Button\r\n                            variant={\r\n                                meridian === null || meridian === 'am' ? 'primary' : 'secondary'\r\n                            }\r\n                            onClick={ () => {\r\n                                this.setState( {\r\n                                    meridian: 'am'\r\n                                } );\r\n                            } }\r\n                            disabled={ hours && minutes ? false : true }\r\n                        >\r\n                            { __( 'AM', 'advanced-gutenberg' ) }\r\n                        </Button>\r\n                        <Button\r\n                            variant={\r\n                                meridian === 'pm' ? 'primary' : 'secondary'\r\n                            }\r\n                            onClick={ () => {\r\n                                this.setState( {\r\n                                    meridian: 'pm'\r\n                                } );\r\n                            } }\r\n                            disabled={ hours && minutes ? false : true }\r\n                        >\r\n                            { __( 'PM', 'advanced-gutenberg' ) }\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                    { hours && minutes &&\r\n        \t\t\t\t<Button\r\n                            className=\"advgb-advtime-remove-icon\"\r\n        \t\t\t\t\ticon=\"no-alt\"\r\n                            onClick={\r\n                                () => {\r\n                                    this.props.onTimeClear();\r\n                                    this.setState( {\r\n                                        hours: null,\r\n                                        minutes: null,\r\n                                        meridian: 'am'\r\n                                    } );\r\n                                }\r\n                            }\r\n        \t\t\t\t/>\r\n        \t\t\t}\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\nexport default AdvTimeClass;\r\n\r\nexport function AdvTimeControl(props) {\r\n    const { label, currentTime, onChangeTime, onTimeClear } = props;\r\n\r\n    return(\r\n        <AdvTimeClass\r\n            label={ label }\r\n            currentTime={ currentTime }\r\n            onChangeTime={ onChangeTime }\r\n            onTimeClear={ onTimeClear }\r\n        />\r\n    );\r\n}\r\n\r\nexport function AdvTimezoneControl(props) {\r\n    const { label, defaultTimezone } = props;\r\n\r\n    return (\r\n        <Fragment>\r\n            { applyFilters( 'advgb.timezoneControl',\r\n                <Fragment>\r\n                    <div style={{ marginTop: 10, marginBottom: 30 }}>\r\n                        <div style={{ marginBottom: 6 }}>\r\n                            { label }\r\n                            <span style={{ float: 'right', marginRight: 5 }}>\r\n                                <Icon icon=\"lock\" />\r\n                                <a href=\"https://publishpress.com/links/blocks\"\r\n                                    class=\"advgb-pro-ad-btn\"\r\n                                    target=\"_blank\">\r\n                                    { __( 'Upgrade to Pro', 'advanced-gutenberg' ) }\r\n                                </a>\r\n                            </span>\r\n                        </div>\r\n                        <SelectControl\r\n                            value={ defaultTimezone }\r\n                            options={ [ {\r\n                                    label: defaultTimezone,\r\n                                    value: defaultTimezone\r\n                                }\r\n                            ] }\r\n                            disabled={ true }\r\n                        />\r\n                    </div>\r\n                </Fragment>,\r\n                props\r\n            ) }\r\n        </Fragment>\r\n    )\r\n}\r\n","/**\r\n * Generate option title suggestions\r\n *\r\n * @since 3.1.1\r\n * @param options Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\r\n *\r\n * @return {array}  Option slugs. e.g. ['subscriber','new_customer']\r\n */\r\nexport const getOptionSuggestions = function( options ) {\r\n    return options.map( ( item ) => item.title );\r\n}\r\n\r\n/**\r\n * Match option slugs with its option titles\r\n * to display as field value (but NOT saved!).\r\n *\r\n * @since 3.1.1\r\n * @param slugs     Option slugs. e.g. ['subscriber','new_customer'] or [82, 92]\r\n * @param options   Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\r\n *\r\n * @return {array}  Option titles. e.g. ['Subscriber','New Customer']\r\n */\r\nexport const getOptionTitles = function( slugs, options ) {\r\n    let field_value = [];\r\n\r\n    if ( options !== null ) {\r\n        field_value = slugs.map( ( option_slug ) => {\r\n            let find_option = options.find( ( item ) => {\r\n                return item.slug === option_slug;\r\n            } );\r\n            if ( find_option === undefined || ! find_option ) {\r\n                return option_slug; // It should return false but creates empty selections\r\n            }\r\n            return find_option.title;\r\n        } );\r\n    }\r\n\r\n    return field_value;\r\n}\r\n\r\n/**\r\n * Match option titles with its slugs, and save slugs\r\n *\r\n * @since 3.1.1\r\n * @param slugs     Option slugs. e.g. ['subscriber','new_customer']\r\n * @param options   Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\r\n *\r\n * @return {array}  Option slugs. e.g. ['subscriber','new_customer']\r\n */\r\nexport const getOptionSlugs = function( slugs, options ) {\r\n    let slugs_array = [];\r\n\r\n    slugs.map(\r\n        ( option_title ) => {\r\n            const matching_slug = options.find( ( item ) => {\r\n                return item.title === option_title;\r\n            } );\r\n            if ( matching_slug !== undefined ) {\r\n                slugs_array.push( matching_slug.slug );\r\n            }\r\n        }\r\n    )\r\n\r\n    return slugs_array;\r\n}\r\n","import classnames from 'classnames';\r\nimport { AdvDateTimeControl, AdvDaysControl, AdvTimeControl, AdvTimezoneControl } from \"../0-adv-components/datetime.jsx\";\r\nimport {\r\n    getOptionSuggestions,\r\n    getOptionTitles,\r\n    getOptionSlugs\r\n} from \"../0-adv-components/utils.jsx\";\r\n\r\n(function ( wpI18n, wpHooks, wpBlocks, wpBlockEditor, wpComponents, wpCompose, wpElement ) {\r\n    wpBlockEditor = wp.blockEditor || wp.editor;\r\n    const { addFilter } = wpHooks;\r\n    const { sprintf, __ } = wpI18n;\r\n    const { hasBlockSupport } = wpBlocks;\r\n    const { InspectorControls, BlockControls } = wpBlockEditor;\r\n    const { DateTimePicker, ToggleControl, PanelBody, Notice, FormTokenField, SelectControl, TextControl, RadioControl } = wpComponents;\r\n\r\n    const { createHigherOrderComponent } = wpCompose;\r\n    const { Component, Fragment } = wpElement;\r\n\r\n    // do not show this feature if disabled.\r\n    if( !parseInt(advgbBlocks.block_controls) ) return;\r\n\r\n    // Blocks that are not supported\r\n    let NON_SUPPORTED_BLOCKS = [\r\n        'core/freeform',\r\n        'core/legacy-widget',\r\n        'core/widget-area',\r\n        'core/column',\r\n        'advgb/tab',\r\n        'advgb/column'\r\n    ];\r\n\r\n    const getGlobalControls = function () {\r\n        return typeof advgb_block_controls_vars.controls !== 'undefined'\r\n                        && Object.keys(advgb_block_controls_vars.controls).length > 0\r\n                            ? advgb_block_controls_vars.controls\r\n                            : [];\r\n    }\r\n\r\n    /**\r\n     * Check if a control is enabled\r\n     *\r\n     * @since 3.1.0\r\n     * @param {string} control  The use case block control. e.g. 'schedule'\r\n     *\r\n     * @return {bool}\r\n     */\r\n    const isControlEnabled = function( control ) {\r\n        return typeof control !== 'undefined' && control;\r\n    }\r\n\r\n    /**\r\n     * Check if at least one control is enabled per block instance\r\n     *\r\n     * @since 3.1.1\r\n     * @param {string} controlAttrs     Controls attributes. e.g. advgbBlockControls or props.attributes @TODO Figure out a way to NOT require controlAttrs as param due is the same always\r\n     *\r\n     * @return {bool}\r\n     */\r\n    const isAnyControlEnabledBlock = function( controlAttrs ) {\r\n        const globalControls    = getGlobalControls();\r\n        let counter             = 0;\r\n        let blockControls       = []; // Controls enabled in block instance\r\n\r\n        // Get enabled global controls (in Settings)\r\n        Object.keys(globalControls).forEach( (item) => {\r\n            if( isControlEnabled( advgb_block_controls_vars.controls[item] ) ) {\r\n                blockControls.push(item);\r\n            }\r\n        } );\r\n\r\n        // Get counter for enabled controls in block instance\r\n        blockControls.forEach( (item) => {\r\n            if( currentControlKey( controlAttrs, item, 'enabled' ) ) {\r\n                counter++;\r\n            }\r\n        } );\r\n\r\n        return counter > 0 ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Check if at least one control is enabled globally (in Settings)\r\n     *\r\n     * @since 3.1.0\r\n     *\r\n     * @return {bool}\r\n     */\r\n    const isAnyControlEnabledGlobal = function() {\r\n        const globalControls    = getGlobalControls();\r\n        let counter             = 0;\r\n\r\n        Object.keys(globalControls).map( (item) => {\r\n            if( isControlEnabled( advgb_block_controls_vars.controls[item] ) ) {\r\n                counter++;\r\n            }\r\n        } );\r\n\r\n        return counter > 0 ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Return single controls array attribute value\r\n     *\r\n     * @since 3.1.0\r\n     * @param {string} controlAttrs     Controls attributes. e.g. advgbBlockControls or props.attributes @TODO Figure out a way to NOT require controlAttrs as param due is the same always\r\n     * @param {string} control          The use case block control. e.g. 'schedule'\r\n     * @param {string} key              The control key to check. e.g. 'enabled'\r\n     *\r\n     * @return {mixed}\r\n     */\r\n    const currentControlKey = function( controlAttrs, control, key ) {\r\n\r\n        // Check if advgbBlockControls attribute exists\r\n        const controlsAdded = typeof controlAttrs !== 'undefined' && controlAttrs.length\r\n                                ? true\r\n                                : false;\r\n        // Check if control exists in advgbBlockControls array\r\n        const controlExists = controlsAdded\r\n                            && controlAttrs.some( (element) => element.control === control )\r\n                                ? true\r\n                                : false;\r\n\r\n        if( controlExists ) {\r\n            const itemIndex = controlAttrs.findIndex(element => element.control === control);\r\n\r\n            // No control found (this check seems not necessary but is here to prevent an unlikely error)\r\n            if( itemIndex < 0 ) {\r\n                return false;\r\n            }\r\n\r\n            let newArray    = [...controlAttrs];\r\n            const obj       = newArray[itemIndex];\r\n\r\n            return obj[key];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    // Add non supported blocks according to Block controls\r\n    if( typeof advgb_block_controls_vars !== 'undefined'\r\n        && typeof advgb_block_controls_vars.non_supported !== 'undefined'\r\n        && advgb_block_controls_vars.non_supported.length > 0\r\n    ) {\r\n        // Merge dynamically disabled blocks\r\n        NON_SUPPORTED_BLOCKS = [...NON_SUPPORTED_BLOCKS, ...advgb_block_controls_vars.non_supported];\r\n        // Remove duplicated values\r\n        NON_SUPPORTED_BLOCKS = [...new Set(NON_SUPPORTED_BLOCKS)];\r\n    }\r\n\r\n    // Register block controls to blocks attributes\r\n    addFilter( 'blocks.registerBlockType', 'advgb/blockControls', function ( settings ) {\r\n        if ( ! NON_SUPPORTED_BLOCKS.includes( settings.name ) && isAnyControlEnabledGlobal() ) {\r\n            settings.attributes = Object.assign( settings.attributes, {\r\n                advgbBlockControls: {\r\n                    type: 'array',\r\n                    items: {\r\n                        type: 'object'\r\n                    },\r\n                    default: []\r\n                }\r\n            } );\r\n        }\r\n\r\n        return settings;\r\n    } );\r\n\r\n    const withEditControls = createHigherOrderComponent( ( BlockEdit ) => {\r\n\r\n        return class BlockControlsEdit extends Component {\r\n\r\n            constructor(props) {\r\n              super(props);\r\n\r\n              this.state = {\r\n                  taxModOptions: [], // Store modified taxonomy options to decide if selected tax is for \"all terms\" or \"selected terms\"\r\n                  termOptions: [], // Store term options with slug (id) and title\r\n                  searchTermWord: '', // Updated when searching terms\r\n                  initArchive: true, // When true, trigger initArchiveControl()\r\n                  updateTaxLabels: false // When true, update taxonomy option labels\r\n              }\r\n\r\n              this.isPost = this.isPost.bind(this);\r\n            }\r\n\r\n            /**\r\n             * Get filtered term slugs based on selected taxonomies\r\n             *\r\n             * @since 3.1.1\r\n             * @param {array} taxonomies Array of taxonomies slugs\r\n             *\r\n             * @return {array}\r\n             */\r\n            getTermSlugs( taxonomies ) {\r\n                const allTaxonomies = this.getTaxonomies();\r\n                let terms = [];\r\n\r\n                taxonomies.forEach( ( tax ) => {\r\n                    const allTaxonomies = this.getTaxonomies();\r\n                    const itemIndex = allTaxonomies.findIndex( ( element ) => element.slug === tax );\r\n\r\n                    allTaxonomies[itemIndex].terms.forEach( ( term ) => {\r\n                        terms.push( term.slug );\r\n                    } );\r\n                } );\r\n\r\n                return terms;\r\n            }\r\n\r\n            /**\r\n             * Get taxonomies\r\n             *\r\n             * @since 3.1.1\r\n             *\r\n             * @return {array}\r\n             */\r\n            getTaxonomies() {\r\n                return typeof advgb_block_controls_vars.taxonomies !== 'undefined'\r\n                        && advgb_block_controls_vars.taxonomies.length > 0\r\n                            ? advgb_block_controls_vars.taxonomies\r\n                            : [];\r\n            }\r\n\r\n            /**\r\n             * Get all the available user roles from the site\r\n             *\r\n             * @since 3.1.0\r\n             *\r\n             * @return {array}\r\n             */\r\n            getUserRoles() {\r\n                return typeof advgb_block_controls_vars.user_roles !== 'undefined'\r\n                        && advgb_block_controls_vars.user_roles.length > 0\r\n                            ? advgb_block_controls_vars.user_roles\r\n                            : [];\r\n            }\r\n\r\n            /**\r\n             * Get filtered terms based on selected taxonomies\r\n             *\r\n             * @since 3.1.1\r\n             * @param {array} taxonomies Taxonomies slugs\r\n             *\r\n             * @return {array}\r\n             */\r\n            getTerms( taxonomies ) {\r\n                const allTaxonomies = this.getTaxonomies();\r\n                let terms = [];\r\n\r\n                taxonomies.forEach( ( tax ) => {\r\n                    const allTaxonomies = this.getTaxonomies();\r\n                    const itemIndex = allTaxonomies.findIndex( ( element ) => element.slug === tax );\r\n\r\n                    allTaxonomies[itemIndex].terms.forEach( ( term ) => {\r\n                        terms.push( {\r\n                            slug: term.slug,\r\n                            title: `${term.title} (${allTaxonomies[itemIndex].title})`\r\n                        } );\r\n                    } );\r\n                } );\r\n\r\n                return terms;\r\n            }\r\n\r\n            /**\r\n             * Get pages\r\n             *\r\n             * @since 3.1.1\r\n             *\r\n             * @return {array}\r\n             */\r\n            getPages() {\r\n                return typeof advgb_block_controls_vars.page !== 'undefined'\r\n                        && advgb_block_controls_vars.page.length > 0\r\n                            ? advgb_block_controls_vars.page\r\n                            : [];\r\n            }\r\n\r\n            /**\r\n             * Update advgbBlockControls attribute when a key value changes\r\n             *\r\n             * @since 2.14.0\r\n             * @param {string} control  The use case block control. e.g. 'schedule'\r\n             * @param {string} key      The control key to modify. e.g. 'enabled'\r\n             * @param {string} value    The control key value (not required for boolean keys)\r\n             *\r\n             * @return {void}\r\n             */\r\n            changeControlKey( control, key, value = '' ) {\r\n                const { attributes, setAttributes } = this.props;\r\n                const { advgbBlockControls } = attributes;\r\n\r\n                // Control objects to add  when enabled for the first time\r\n                const scheduleControl = {\r\n                    control: 'schedule',\r\n                    enabled: true,\r\n                    dateFrom: null,\r\n                    dateTo: null,\r\n                    recurring: false\r\n                };\r\n                const userRoleControl = {\r\n                    control: 'user_role',\r\n                    enabled: true,\r\n                    roles: [],\r\n                    approach: 'public'\r\n                };\r\n                const archiveControl = {\r\n                    control: 'archive',\r\n                    enabled: true,\r\n                    taxonomies: [],\r\n                    approach: 'exclude'\r\n                };\r\n                const pageControl = {\r\n                    control: 'page',\r\n                    enabled: true,\r\n                    pages: [],\r\n                    approach: 'exclude'\r\n                };\r\n                const deviceTypeControl = {\r\n                    control: 'device_type',\r\n                    enabled: true,\r\n                    devices: []\r\n                };\r\n\r\n                const deviceWidthControl = {\r\n                    control: 'device_width',\r\n                    enabled: true,\r\n                    min_width: '',\r\n                    max_width: ''\r\n                };\r\n\r\n                // Check if advgbBlockControls attribute exists\r\n                const controlsAdded = typeof advgbBlockControls !== 'undefined' && advgbBlockControls.length\r\n                                        ? true\r\n                                        : false;\r\n                // Check if control exists in advgbBlockControls array\r\n                const controlExists = controlsAdded &&\r\n                                    advgbBlockControls.some( (element) => element.control === control )\r\n                                        ? true\r\n                                        : false;\r\n\r\n                if( controlExists ) {\r\n                    const itemIndex = advgbBlockControls.findIndex(element => element.control === control);\r\n\r\n                    // No control found (this check seems not necessary but is here to prevent an unlikely error)\r\n                    if( itemIndex < 0 ) {\r\n                        return false;\r\n                    }\r\n\r\n                    let newArray    = [...advgbBlockControls];\r\n                    const obj       = newArray[itemIndex];\r\n\r\n                    newArray[itemIndex] = typeof obj[key] === 'boolean'\r\n                        ? { ...newArray[itemIndex], [key]: !obj[key] }\r\n                        : { ...newArray[itemIndex], [key]: value }\r\n\r\n                    setAttributes( {\r\n                        advgbBlockControls: newArray\r\n                    } );\r\n                } else if( controlsAdded && ! controlExists ) {\r\n\r\n                    // Add a new control object when other controls already exists\r\n                    switch( control ) {\r\n                        case 'schedule':\r\n                            setAttributes( {\r\n                                advgbBlockControls: [\r\n                                    ...advgbBlockControls,\r\n                                    scheduleControl\r\n                                ]\r\n                            } );\r\n                        break;\r\n\r\n                        case 'user_role':\r\n                            setAttributes( {\r\n                                advgbBlockControls: [\r\n                                    ...advgbBlockControls,\r\n                                    userRoleControl\r\n                                ]\r\n                            } );\r\n                        break;\r\n\r\n                        case 'archive':\r\n                            setAttributes( {\r\n                                advgbBlockControls: [\r\n                                    ...advgbBlockControls,\r\n                                    archiveControl\r\n                                ]\r\n                            } );\r\n                        break;\r\n\r\n                        case 'page':\r\n                            setAttributes( {\r\n                                advgbBlockControls: [\r\n                                    ...advgbBlockControls,\r\n                                    pageControl\r\n                                ]\r\n                            } );\r\n                        break;\r\n\r\n                        case 'device_type':\r\n                            setAttributes( {\r\n                                advgbBlockControls: [\r\n                                    ...advgbBlockControls,\r\n                                    deviceTypeControl\r\n                                ]\r\n                            } );\r\n                        break;\r\n\r\n                        case 'device_width':\r\n                            setAttributes( {\r\n                                advgbBlockControls: [\r\n                                    ...advgbBlockControls,\r\n                                    deviceWidthControl\r\n                                ]\r\n                            } );\r\n                        break;\r\n                    }\r\n                } else {\r\n                    // Add the first control object attribute\r\n                    switch( control ) {\r\n                        case 'schedule':\r\n                            setAttributes( {\r\n                                advgbBlockControls: [ scheduleControl ]\r\n                            } );\r\n                        break;\r\n\r\n                        case 'user_role':\r\n                            setAttributes( {\r\n                                advgbBlockControls: [ userRoleControl ]\r\n                            } );\r\n                        break;\r\n\r\n                        case 'archive':\r\n                            setAttributes( {\r\n                                advgbBlockControls: [ archiveControl ]\r\n                            } );\r\n                        break;\r\n\r\n                        case 'page':\r\n                            setAttributes( {\r\n                                advgbBlockControls: [ pageControl ]\r\n                            } );\r\n                        break;\r\n\r\n                        case 'device_type':\r\n                            setAttributes( {\r\n                                advgbBlockControls: [ deviceTypeControl ]\r\n                            } );\r\n                        break;\r\n\r\n                        case 'device_width':\r\n                            setAttributes( {\r\n                                advgbBlockControls: [ deviceWidthControl ]\r\n                            } );\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Update archive control in advgbBlockControls attribute when taxonomies value changes\r\n             *\r\n             * @since 3.1.2\r\n             *\r\n             * @param {string} topic 'taxonomies' or 'terms'\r\n             * @param {string} slugs The taxonomy slugs or term ids to insert/modify. e.g. ['category','post_tag'] or [82,161,99] or ['all_<taxonomy_slug>']\r\n             *\r\n             * @return {void}\r\n             */\r\n            changeArchiveControl( topic, slugs ) {\r\n                const { attributes, setAttributes } = this.props;\r\n                const { advgbBlockControls } = attributes;\r\n\r\n                let taxArray        = [];\r\n                const controlIndex  = advgbBlockControls.findIndex(element => element.control === 'archive');\r\n\r\n                // No control found (this check seems not necessary but is here to prevent an unlikely error)\r\n                if( controlIndex < 0 ) {\r\n                    return false;\r\n                }\r\n\r\n                let newArray = [...advgbBlockControls];\r\n\r\n                if( topic === 'taxonomies' ) {\r\n\r\n                    // Check each taxonomy and its terms\r\n                    slugs.forEach( (item) => {\r\n\r\n                        // Get terms from current taxonomy (item)\r\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex(element => element.tax === item);\r\n\r\n                        if( taxIndex === -1 ) {\r\n\r\n                            // The last selected taxonomy\r\n                            taxArray.push( {\r\n                                tax: item,\r\n                                terms: [],\r\n                                all: true\r\n                            } );\r\n\r\n                        } else {\r\n\r\n                            // Existing taxonomy\r\n                            const terms     = newArray[controlIndex].taxonomies[taxIndex].terms.length\r\n                                                ? newArray[controlIndex].taxonomies[taxIndex].terms\r\n                                                : [];\r\n                            const approach  = terms.length ? 'select' : 'all';\r\n\r\n                            taxArray.push( {\r\n                                tax: item,\r\n                                terms: terms,\r\n                                all: terms.length ? false : true\r\n                            } );\r\n                        }\r\n                    } );\r\n\r\n                    newArray[controlIndex] = { ...newArray[controlIndex], ['taxonomies']: taxArray }\r\n\r\n                    setAttributes( {\r\n                        advgbBlockControls: newArray\r\n                    } );\r\n\r\n                } else if( topic === 'terms' ) {\r\n\r\n                    let terms           = {};\r\n                    const taxonomies    = this.currentArchiveControl( 'taxonomies' );\r\n\r\n                    // Check each term id (item). slug means the id\r\n                    slugs.forEach( ( item ) => {\r\n\r\n                        // Find the current term in termOptions state to use its tax later\r\n                        const option = this.state.termOptions.find( el => el.slug === item);\r\n\r\n                        if( terms[option.tax] === undefined ) {\r\n                            terms[option.tax] = [];\r\n                        }\r\n\r\n                        // Get taxonomy from current term (item)\r\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex( element => element.tax === option.tax);\r\n\r\n                        /* Taxonomy for this term is selected? Is a bit reduntant but let's make sure\r\n                         * Then include the term.\r\n                         */\r\n                        if( taxonomies.includes( option.tax ) ) {\r\n                            terms[option.tax].push( item );\r\n                        }\r\n\r\n                    } );\r\n\r\n                    // Update taxonomies with at least one term selected\r\n                    Object.keys( terms ).forEach( (tax) => {\r\n\r\n                        // Get taxonomy from current tax\r\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex( element => element.tax === tax);\r\n\r\n                        if( taxIndex >= 0 ) {\r\n                            newArray[controlIndex].taxonomies[taxIndex] = {\r\n                                tax: tax,\r\n                                terms: terms[tax],\r\n                                all: terms[tax].length ? false : true\r\n                            };\r\n                        }\r\n                    } );\r\n\r\n                    // Include taxonomies with no terms selected (empty terms[option.tax] array)\r\n                    taxonomies.forEach( ( tax ) => {\r\n                        if( ! Object.keys( terms ).includes( tax ) ) {\r\n\r\n                            // Get taxonomy from current tax\r\n                            const taxIndex = newArray[controlIndex].taxonomies.findIndex( element => element.tax === tax);\r\n\r\n                            if( taxIndex >= 0 ) {\r\n                                newArray[controlIndex].taxonomies[taxIndex] = {\r\n                                    tax: tax,\r\n                                    terms: [],\r\n                                    all: true\r\n                                };\r\n                            }\r\n                        }\r\n                    } );\r\n\r\n                    setAttributes( {\r\n                        advgbBlockControls: newArray\r\n                    } );\r\n\r\n                } else {\r\n                    // Nothing to do here\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Return merged taxonomies or terms\r\n             *\r\n             * @since 3.1.2\r\n             *\r\n             * @param {string} topic 'taxonomies' or 'terms'\r\n             *\r\n             * @return {array} An single array with all the selected terms or taxonomies ['category','post_tag'] or [99,182,42]\r\n             */\r\n            currentArchiveControl( topic ) {\r\n                const { attributes, setAttributes } = this.props;\r\n                const { advgbBlockControls } = attributes;\r\n\r\n                let result = [];\r\n\r\n                /* Get all the taxonomy objects.\r\n                 * e.g.\r\n                 * [\r\n                 *     { \"tax\": \"post_tag\", \"terms\": [220,221]},\r\n                 *     { \"tax\": \"category\", \"terms\": []}\r\n                 * ]\r\n                 */\r\n                const taxonomies    = currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ).length\r\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\r\n                                        : [];\r\n\r\n                if( topic === 'taxonomies' ) {\r\n\r\n                    taxonomies.forEach( (item) => {\r\n                        result.push(item.tax);\r\n                    } );\r\n\r\n                } else if( topic === 'terms' ) {\r\n\r\n                    taxonomies.forEach( (item) => {\r\n                        item.terms.forEach( ( el ) => {\r\n                            result.push( el ); // term id\r\n                        } );\r\n                    } );\r\n\r\n                } else {\r\n                    // Nothing to do here\r\n                }\r\n\r\n                return result;\r\n            }\r\n\r\n            /**\r\n             * Execute when taxonomy selection changes\r\n             *\r\n             * @since 3.1.1\r\n             *\r\n             * @return {void}\r\n             */\r\n            taxonomiesChanged() {\r\n                const { attributes } = this.props;\r\n                const { advgbBlockControls } = attributes;\r\n\r\n                const currentTerms  = !! currentControlKey( advgbBlockControls, 'archive', 'terms' )\r\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'terms' )\r\n                                        : [];\r\n                const taxonomies    = !! currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\r\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\r\n                                        : [];\r\n\r\n                if( currentTerms.length ) {\r\n\r\n                   let result = [];\r\n                   currentTerms.forEach( ( slug ) => {\r\n                       const itemIndex = this.state.termOptions.findIndex( ( item ) => item.slug === slug );\r\n\r\n                       /* Get only the terms that belongs to selected taxonomies\r\n                        * and skip the ones that belongs to the deleted taxonomy\r\n                        */\r\n                       if( taxonomies.includes( this.state.termOptions[itemIndex].tax ) ) {\r\n                          result.push( this.state.termOptions[itemIndex].slug );\r\n                       }\r\n                   } );\r\n\r\n                   this.changeControlKey(\r\n                       'archive',\r\n                       'terms',\r\n                       result\r\n                   );\r\n                }\r\n\r\n                /* Remove term options from non-selected taxonomies.\r\n                 * Case scenario: the terms from the last removed taxonomy.\r\n                 */\r\n                this.setState( {\r\n                    termOptions: this.state.termOptions.filter( (item) => {\r\n                        return this.currentArchiveControl( 'taxonomies' ).includes( item.tax );\r\n                    } )\r\n                } );\r\n\r\n                // Update tax label options to \"All <taxonomy> terms\" or \"Selected <taxonomy> terms\"\r\n                this.modifyTaxLabels();\r\n            }\r\n\r\n            /**\r\n             * Get selected terms on first load\r\n             *\r\n             * @since 3.1.1\r\n             *\r\n             * @return {void}\r\n             */\r\n            initArchiveControl() {\r\n                const { advgbBlockControls } = this.props.attributes;\r\n\r\n                wp.apiFetch( {\r\n                    path: wp.url.addQueryArgs(\r\n                        'advgb/v1/terms',\r\n                        {\r\n                            taxonomies: this.currentArchiveControl( 'taxonomies' ),\r\n                            ids: this.currentArchiveControl( 'terms' )\r\n                        }\r\n                    )\r\n                } ).then( ( list ) => {\r\n\r\n                    // Update tax label options to \"All <taxonomy> terms\" or \"Selected <taxonomy> terms\"\r\n                    this.modifyTaxLabels();\r\n\r\n                    this.setState( {\r\n                        termOptions: list,\r\n                        initArchive: false,\r\n                        updateTaxLabels: false\r\n                    } );\r\n                } );\r\n\r\n\r\n            }\r\n\r\n            /**\r\n             * Initial taxonomy labels to allow \"All <taxonomy> terms\" \"Selected <taxonomy> terms\" visual indicator\r\n             *\r\n             * @since 3.1.2\r\n             *\r\n             * @return {array}\r\n             */\r\n            iniTaxLabels() {\r\n\r\n                let result = [];\r\n                this.getTaxonomies().forEach( (item) => {\r\n                    /* Item example\r\n                     *  {\r\n                     *      \"slug\": \"category\",\r\n                     *      \"title\": \"All Category terms\",\r\n                     *      \"singular\": \"Category\"\r\n                     *  }\r\n                     */\r\n                    result.push( {\r\n                        slug: item.slug,\r\n                        title: sprintf(\r\n                            __( 'All %s terms', 'advanced-gutenberg' ),\r\n                            item.title\r\n                        ),\r\n                        singular: item.title\r\n\r\n                    } );\r\n                } );\r\n\r\n                return result;\r\n            }\r\n\r\n            /**\r\n             * Modify taxonomy labels. Very similar to iniTaxLabels()\r\n             *\r\n             * @since 3.1.2\r\n             *\r\n             * @return {array}\r\n             */\r\n            modifyTaxLabels() {\r\n                const { advgbBlockControls } = this.props.attributes;\r\n\r\n                /* Get all selected taxonomy objects.\r\n                 * e.g.\r\n                 * [\r\n                 *     { \"tax\": \"post_tag\", \"terms\": [220,221]},\r\n                 *     { \"tax\": \"category\", \"terms\": []}\r\n                 * ]\r\n                 */\r\n                const taxonomies    = currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ).length\r\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\r\n                                        : [];\r\n\r\n                // Copy whole state\r\n                let options = [...this.state.taxModOptions];\r\n\r\n                options.forEach( (item, index) => {\r\n                    const tax = taxonomies.find( el => item.slug === el.tax );\r\n\r\n                    // Copy option to modify\r\n                    let option = { ...options[index] };\r\n                    // Update title value\r\n                    option.title = sprintf(\r\n                        tax === undefined || ! tax.terms.length\r\n                            ? __( 'All %s terms', 'advanced-gutenberg' )\r\n                            : __( 'Selected %s terms', 'advanced-gutenberg' ),\r\n                        option.singular\r\n                    );\r\n                    // Add option back to the state\r\n                    options[index] = option;\r\n                } );\r\n\r\n                // Save\r\n                this.setState( {\r\n                    taxModOptions: options,\r\n                    updateTaxLabels: false\r\n                } );\r\n            }\r\n\r\n            /**\r\n             * Search terms based on search\r\n             *\r\n             * @since 3.1.1\r\n             *\r\n             * @return {void}\r\n             */\r\n            searchTerms() {\r\n                const { termOptions, searchTermWord } = this.state;\r\n                const { advgbBlockControls } = this.props.attributes;\r\n\r\n                wp.apiFetch( {\r\n                    /*/ To get taxonomies\r\n                    path: wp.url.addQueryArgs( 'wp/v2/taxonomies', { context: 'edit' } )*/\r\n\r\n                    path: wp.url.addQueryArgs(\r\n                        'advgb/v1/terms',\r\n                        {\r\n                            search: searchTermWord,\r\n                            taxonomies: this.currentArchiveControl( 'taxonomies' )\r\n                        }\r\n                    )\r\n\r\n                } ).then( ( list ) => {\r\n\r\n                    /*/ To get taxonomies\r\n                    Object.keys(list).forEach( (item) => {\r\n                        options.push( {\r\n                            label: list[item].name,\r\n                            value: list[item].slug\r\n                        } );\r\n                    });*/\r\n\r\n                    // Merge selected terms with results from fetch\r\n                    let options = [ ...termOptions, ...list ];\r\n\r\n                    // Remove duplicated values\r\n                    options = Array.from( new Set( options.map( a => a.slug ) ) )\r\n                        .map( slug => {\r\n                            return options.find( a => a.slug === slug )\r\n                        });\r\n\r\n                    this.setState( {\r\n                        termOptions: options\r\n                    } );\r\n                } );\r\n            }\r\n\r\n            /**\r\n             * Check if we're in post edit screen\r\n             *\r\n             * @since 3.1.2\r\n             *\r\n             * @return {bool}\r\n             */\r\n            isPost() {\r\n                return wp.data.select('core/editor') && wp.data.select('core/editor').getCurrentPostId();\r\n            }\r\n\r\n            /**\r\n             * Get the timezone label from site settings stored in advgbBlocks object\r\n             *\r\n             * @since 3.1.4\r\n             *\r\n             * @return {bool}\r\n             */\r\n            getTimezoneLabel() {\r\n                return typeof advgbBlocks.timezone !== 'undefined' && advgbBlocks.timezone.length\r\n                    ? advgbBlocks.timezone.replace(/_/g, ' ')\r\n                    : __( 'WordPress settings timezone', 'advanced-gutenberg' )\r\n            }\r\n\r\n            /**\r\n             * Get the timezone slug from site settings stored in advgbBlocks object\r\n             *\r\n             * @since 3.1.4\r\n             *\r\n             * @return {bool}\r\n             */\r\n            getTimezoneSlug() {\r\n                return typeof advgbBlocks.timezone !== 'undefined' && advgbBlocks.timezone.length\r\n                    ? advgbBlocks.timezone\r\n                    : 'UTC'\r\n            }\r\n\r\n            componentDidMount() {\r\n                this.setState( {\r\n                    taxModOptions: this.iniTaxLabels()\r\n                } );\r\n            }\r\n\r\n            componentDidUpdate(prevProps, prevState) {\r\n                const { attributes, isSelected, name } = this.props;\r\n                const { advgbBlockControls } = attributes;\r\n                const { advgbBlockControls: prevBlockControls } = prevProps.attributes;\r\n                const { searchTermWord, initArchive } = this.state;\r\n                const { searchTermWord: prevTermWord } = prevState;\r\n\r\n                // Get human readable selected terms on block selection the first time\r\n                if( ! this.isPost()\r\n                    && ! NON_SUPPORTED_BLOCKS.includes( name )\r\n                    && isSelected\r\n                    && initArchive\r\n                    && isControlEnabled( advgb_block_controls_vars.controls.archive )\r\n                    && currentControlKey( advgbBlockControls, 'archive', 'enabled' )\r\n                    && this.currentArchiveControl( 'taxonomies' ).length\r\n                    && this.currentArchiveControl( 'terms' ).length\r\n                ) {\r\n                    this.initArchiveControl();\r\n                }\r\n\r\n                // Search terms\r\n                if( searchTermWord !== prevTermWord && searchTermWord.length > 2 ) {\r\n                    this.searchTerms();\r\n                }\r\n\r\n                // Update available terms and remove terms which taxonomy has been removed\r\n                if( ! this.isPost()\r\n                    && isControlEnabled( advgb_block_controls_vars.controls.archive )\r\n                    && currentControlKey( advgbBlockControls, 'archive', 'enabled' )\r\n                    && (\r\n                        currentControlKey( prevBlockControls, 'archive', 'taxonomies' ) !== currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ) // This trigger works when taxo changes, but not terms\r\n                        || this.state.updateTaxLabels // Trigger when terms changes\r\n                    )\r\n                ) {\r\n                    this.taxonomiesChanged();\r\n                }\r\n            }\r\n\r\n            render() {\r\n                const { attributes, setAttributes } = this.props;\r\n                const { advgbBlockControls } = attributes;\r\n\r\n                return ( [\r\n                        this.props.isSelected && ( ! NON_SUPPORTED_BLOCKS.includes( this.props.name ) )\r\n                        && isAnyControlEnabledGlobal() &&\r\n                        <InspectorControls key=\"advgb-bc-controls\">\r\n                            <PanelBody\r\n                                title={ __( 'Block Controls', 'advanced-gutenberg' ) }\r\n                                icon=\"visibility\"\r\n                                initialOpen={ false }\r\n                                className={\r\n                                    isAnyControlEnabledBlock( advgbBlockControls )\r\n                                        ? 'advgb-feature-icon-active' : ''\r\n                                }\r\n                            >\r\n                                { isControlEnabled( advgb_block_controls_vars.controls.schedule ) && (\r\n                                <Fragment>\r\n                                    <ToggleControl\r\n                                        label={ __( 'Schedule', 'advanced-gutenberg' ) }\r\n                                        help={ currentControlKey( advgbBlockControls, 'schedule', 'enabled' )\r\n                                            ? __( 'Choose when to start showing and/or stop showing this block.', 'advanced-gutenberg' )\r\n                                            : ''\r\n                                        }\r\n                                        checked={ currentControlKey( advgbBlockControls, 'schedule', 'enabled' ) }\r\n                                        onChange={ () => this.changeControlKey( 'schedule', 'enabled' ) }\r\n                                    />\r\n                                    { currentControlKey( advgbBlockControls, 'schedule', 'enabled' ) && (\r\n                                        <Fragment>\r\n                                            <div style={ { marginBottom: 30 } }>\r\n                                                <AdvDateTimeControl\r\n                                                    buttonLabel={ __( 'Now', 'advanced-gutenberg' ) }\r\n                                                    dateLabel={ __( 'Start showing', 'advanced-gutenberg' ) }\r\n                                                    date={ currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) }\r\n                                                    onChangeDate={ ( newDate ) => this.changeControlKey( 'schedule', 'dateFrom', newDate ) }\r\n                                                    onDateClear={ () => this.changeControlKey( 'schedule', 'dateFrom', null ) }\r\n                                                    onInvalidDate={ false }\r\n                                                />\r\n                                                <AdvDateTimeControl\r\n                                                    buttonLabel={ __( 'Never', 'advanced-gutenberg' ) }\r\n                                                    dateLabel={ __( 'Stop showing', 'advanced-gutenberg' ) }\r\n                                                    date={ !! currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) ? currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) : null }\r\n                                                    onChangeDate={ ( newDate ) => this.changeControlKey( 'schedule', 'dateTo', newDate ) }\r\n                                                    onDateClear={ () => this.changeControlKey( 'schedule', 'dateTo', null ) }\r\n                                                    onInvalidDate={ ( date ) => {\r\n                                                        // Disable all dates before dateFrom\r\n                                                        if( currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) ) {\r\n                                                            let thisDate = new Date(date.getTime());\r\n                                                            thisDate.setHours(0, 0, 0, 0);\r\n                                                            let fromDate = new Date( currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) );\r\n                                                            fromDate.setHours(0, 0, 0, 0);\r\n                                                            return thisDate.getTime() < fromDate.getTime();\r\n                                                        }\r\n                                                    } }\r\n                                                />\r\n                                                { ( currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) > currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) ) &&\r\n                                                    <Notice\r\n                                                        className=\"advgb-notice-sidebar\"\r\n                                                        status=\"warning\"\r\n                                                        isDismissible={ false }\r\n                                                    >\r\n                                                        { __( '\"Stop showing\" date should be after \"Start showing\" date!', 'advanced-gutenberg' ) }\r\n                                                    </Notice>\r\n                                                }\r\n                                                { currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) && currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) &&\r\n                                                    <ToggleControl\r\n                                                        label={ __( 'Recurring', 'advanced-gutenberg' ) }\r\n                                                        checked={ currentControlKey( advgbBlockControls, 'schedule', 'recurring' ) }\r\n                                                        onChange={ () => this.changeControlKey( 'schedule', 'recurring' ) }\r\n                                                        help={ __( 'If Recurring is enabled, this block will be displayed every year between the selected dates.', 'advanced-gutenberg' ) }\r\n                                                    />\r\n                                                }\r\n                                                <AdvDaysControl\r\n                                                    label={ __( 'On these days (optional)', 'advanced-gutenberg' ) }\r\n                                                    days={\r\n                                                        !! currentControlKey( advgbBlockControls, 'schedule', 'days' )\r\n                                                            ? currentControlKey( advgbBlockControls, 'schedule', 'days' )\r\n                                                            : []\r\n                                                    }\r\n                                                    onChangeDays={ ( value ) => this.changeControlKey( 'schedule', 'days', value ) }\r\n                                                />\r\n                                                <label style={ { marginBottom: 8, display: 'block' } }>\r\n                                                    { __( 'Between these times (optional)', 'advanced-gutenberg' ) }\r\n                                                </label>\r\n                                                <AdvTimeControl\r\n                                                    label={ __( 'From', 'advanced-gutenberg' ) }\r\n                                                    currentTime={\r\n                                                        !! currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\r\n                                                            ? currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\r\n                                                            : null\r\n                                                    }\r\n                                                    onChangeTime={\r\n                                                        ( newTime ) => this.changeControlKey(\r\n                                                            'schedule',\r\n                                                            'timeFrom',\r\n                                                            newTime\r\n                                                        )\r\n                                                    }\r\n                                                    onTimeClear={ () => this.changeControlKey( 'schedule', 'timeFrom', null ) }\r\n                                                />\r\n                                                <AdvTimeControl\r\n                                                    label={ __( 'To', 'advanced-gutenberg' ) }\r\n                                                    currentTime={\r\n                                                        currentControlKey( advgbBlockControls, 'schedule', 'timeTo' ) || null\r\n                                                    }\r\n                                                    onChangeTime={\r\n                                                        ( newTime ) => this.changeControlKey(\r\n                                                            'schedule',\r\n                                                            'timeTo',\r\n                                                            newTime\r\n                                                        )\r\n                                                    }\r\n                                                    onTimeClear={ () => this.changeControlKey( 'schedule', 'timeTo', null ) }\r\n                                                />\r\n                                                { (\r\n                                                    currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\r\n                                                    && currentControlKey( advgbBlockControls, 'schedule', 'timeTo' )\r\n                                                    && (\r\n                                                        '01/01/2020T' + currentControlKey( // We append a dummy date to make a datetime comparison\r\n                                                            advgbBlockControls, 'schedule', 'timeFrom'\r\n                                                        ) >= '01/01/2020T' + currentControlKey( // We append a dummy date to make a datetime comparison\r\n                                                            advgbBlockControls, 'schedule', 'timeTo'\r\n                                                        )\r\n                                                    )\r\n                                                ) &&\r\n                                                    <Notice\r\n                                                        className=\"advgb-notice-sidebar\"\r\n                                                        status=\"warning\"\r\n                                                        isDismissible={ false }\r\n                                                    >\r\n                                                        { __( '\"To\" time should be after \"From\" time!', 'advanced-gutenberg' ) }\r\n                                                    </Notice>\r\n                                                }\r\n                                                { (\r\n                                                    (\r\n                                                        currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\r\n                                                        && ! currentControlKey( advgbBlockControls, 'schedule', 'timeTo' )\r\n                                                    ) || (\r\n                                                        ! currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\r\n                                                        && currentControlKey( advgbBlockControls, 'schedule', 'timeTo' )\r\n                                                    )\r\n                                                ) &&\r\n                                                    <Notice\r\n                                                        className=\"advgb-notice-sidebar\"\r\n                                                        status=\"warning\"\r\n                                                        isDismissible={ false }\r\n                                                    >\r\n                                                        { __( 'Please choose \"From\" time and \"To\" time.', 'advanced-gutenberg' ) }\r\n                                                    </Notice>\r\n                                                }\r\n                                                <AdvTimezoneControl\r\n                                                    label={ __( 'Timezone', 'advanced-gutenberg' ) }\r\n                                                    defaultTimezone={ this.getTimezoneLabel()  }\r\n                                                    value={\r\n                                                        currentControlKey( advgbBlockControls, 'schedule', 'timezone' )\r\n                                                            ? currentControlKey( advgbBlockControls, 'schedule', 'timezone' )\r\n                                                            : this.getTimezoneSlug()\r\n                                                    }\r\n                                                    onChangeTimezone={ ( value ) => this.changeControlKey( 'schedule', 'timezone', value ) }\r\n                                                />\r\n                                            </div>\r\n                                        </Fragment>\r\n                                    ) }\r\n                                </Fragment>\r\n                                ) }\r\n                                { isControlEnabled( advgb_block_controls_vars.controls.user_role ) && (\r\n                                <Fragment>\r\n                                    <ToggleControl\r\n                                        label={ __( 'User roles', 'advanced-gutenberg' ) }\r\n                                        help={ currentControlKey( advgbBlockControls, 'user_role', 'enabled' )\r\n                                            ? __( 'Choose which users can see this block.', 'advanced-gutenberg' )\r\n                                            : ''\r\n                                        }\r\n                                        checked={ currentControlKey( advgbBlockControls, 'user_role', 'enabled' ) }\r\n                                        onChange={ () => this.changeControlKey( 'user_role', 'enabled' ) }\r\n                                    />\r\n                                    { currentControlKey( advgbBlockControls, 'user_role', 'enabled' ) && (\r\n                                        <Fragment>\r\n                                            <div className=\"advgb-revert-mb\">\r\n                                                <SelectControl\r\n                                                    value={\r\n                                                        currentControlKey( advgbBlockControls, 'user_role', 'approach' )\r\n                                                    }\r\n                                                    options={ [\r\n                                                        {\r\n                                                            value: 'public',\r\n                                                            label: __( 'Show to everyone', 'advanced-gutenberg' )\r\n                                                        },\r\n                                                        {\r\n                                                            value: 'hidden',\r\n                                                            label: __( 'Hide from everyone', 'advanced-gutenberg' )\r\n                                                        },\r\n                                                        {\r\n                                                            value: 'login',\r\n                                                            label: __( 'Show to logged in users', 'advanced-gutenberg' )\r\n                                                        },\r\n                                                        {\r\n                                                            value: 'logout',\r\n                                                            label: __( 'Show to logged out users', 'advanced-gutenberg' )\r\n                                                        },\r\n                                                        {\r\n                                                            value: 'include',\r\n                                                            label: __( 'Show to the selected user roles', 'advanced-gutenberg' )\r\n                                                        },\r\n                                                        {\r\n                                                            value: 'exclude',\r\n                                                            label: __( 'Hide from the selected user roles', 'advanced-gutenberg' )\r\n                                                        }\r\n                                                    ] }\r\n                                                    onChange={ ( value ) => this.changeControlKey( 'user_role', 'approach', value ) }\r\n                                                />\r\n                                            </div>\r\n                                            { ( currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'include' ||\r\n                                                currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'exclude'\r\n                                            ) && (\r\n                                                <Fragment>\r\n                                                    <FormTokenField\r\n                                                        multiple\r\n                                                        label={ __( 'Select user roles', 'advanced-gutenberg' ) }\r\n                                                        placeholder={ __( 'Search', 'advanced-gutenberg' ) }\r\n                                                        suggestions={ getOptionSuggestions( this.getUserRoles() ) }\r\n                                                        maxSuggestions={ 10 }\r\n                                                        value={\r\n                                                            getOptionTitles(\r\n                                                                !! currentControlKey( advgbBlockControls, 'user_role', 'roles' )\r\n                                                                    ? currentControlKey( advgbBlockControls, 'user_role', 'roles' )\r\n                                                                    : [],\r\n                                                                this.getUserRoles()\r\n                                                            )\r\n                                                        }\r\n                                                        onChange={ ( value ) => {\r\n                                                            this.changeControlKey( 'user_role', 'roles', getOptionSlugs( value, this.getUserRoles() ) )\r\n                                                        } }\r\n                                                        __experimentalExpandOnFocus\r\n                                                    />\r\n                                                    { ( currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'include' ||\r\n                                                        currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'exclude'\r\n                                                    )\r\n                                                    && ! currentControlKey( advgbBlockControls, 'user_role', 'roles' ).length && (\r\n                                                        <Notice\r\n                                                                className=\"advgb-notice-sidebar\"\r\n                                                                status=\"warning\"\r\n                                                                isDismissible={ false }\r\n                                                                style={ { marginBottom: 30 } }\r\n                                                            >\r\n                                                            {\r\n                                                                __(\r\n                                                                    'Please select at least one user role.',\r\n                                                                    'advanced-gutenberg'\r\n                                                                )\r\n                                                            }\r\n                                                        </Notice>\r\n                                                    ) }\r\n                                                </Fragment>\r\n                                            ) }\r\n                                        </Fragment>\r\n                                    ) }\r\n                                </Fragment>\r\n                                ) }\r\n                                { isControlEnabled( advgb_block_controls_vars.controls.device_type ) && (\r\n                                    <Fragment>\r\n                                        <ToggleControl\r\n                                            label={ __( 'Device Type', 'advanced-gutenberg' ) }\r\n                                            help={ currentControlKey( advgbBlockControls, 'device_type', 'enabled' )\r\n                                                ? __( 'Choose which devices this block should be visible on.', 'advanced-gutenberg' )\r\n                                                : ''\r\n                                            }\r\n                                            checked={ currentControlKey( advgbBlockControls, 'device_type', 'enabled' ) }\r\n                                            onChange={ () => this.changeControlKey( 'device_type', 'enabled' ) }\r\n                                        />\r\n                                        { currentControlKey( advgbBlockControls, 'device_type', 'enabled' ) && (\r\n                                            <Fragment>\r\n                                                <ToggleControl\r\n                                                    label={ __( 'Desktop', 'advanced-gutenberg' ) }\r\n                                                    checked={ currentControlKey( advgbBlockControls, 'device_type', 'devices' ).includes('desktop') }\r\n                                                    onChange={ () => {\r\n                                                        const devices = currentControlKey( advgbBlockControls, 'device_type', 'devices' );\r\n                                                        const newDevices = devices.includes('desktop')\r\n                                                            ? devices.filter(d => d !== 'desktop')\r\n                                                            : [...devices, 'desktop'];\r\n                                                        this.changeControlKey( 'device_type', 'devices', newDevices );\r\n                                                    } }\r\n                                                />\r\n                                                <ToggleControl\r\n                                                    label={ __( 'Tablet', 'advanced-gutenberg' ) }\r\n                                                    checked={ currentControlKey( advgbBlockControls, 'device_type', 'devices' ).includes('tablet') }\r\n                                                    onChange={ () => {\r\n                                                        const devices = currentControlKey( advgbBlockControls, 'device_type', 'devices' );\r\n                                                        const newDevices = devices.includes('tablet')\r\n                                                            ? devices.filter(d => d !== 'tablet')\r\n                                                            : [...devices, 'tablet'];\r\n                                                        this.changeControlKey( 'device_type', 'devices', newDevices );\r\n                                                    } }\r\n                                                />\r\n                                                <ToggleControl\r\n                                                    label={ __( 'Mobile', 'advanced-gutenberg' ) }\r\n                                                    checked={ currentControlKey( advgbBlockControls, 'device_type', 'devices' ).includes('mobile') }\r\n                                                    onChange={ () => {\r\n                                                        const devices = currentControlKey( advgbBlockControls, 'device_type', 'devices' );\r\n                                                        const newDevices = devices.includes('mobile')\r\n                                                            ? devices.filter(d => d !== 'mobile')\r\n                                                            : [...devices, 'mobile'];\r\n                                                        this.changeControlKey( 'device_type', 'devices', newDevices );\r\n                                                    } }\r\n                                                />\r\n                                            </Fragment>\r\n                                        ) }\r\n                                    </Fragment>\r\n                                ) }\r\n\r\n                                { isControlEnabled( advgb_block_controls_vars.controls.device_width ) && (\r\n                                    <Fragment>\r\n                                        <ToggleControl\r\n                                            label={ __( 'Device Width', 'advanced-gutenberg' ) }\r\n                                            help={ currentControlKey( advgbBlockControls, 'device_width', 'enabled' )\r\n                                                ? __( 'Set minimum and maximum screen widths for this block.', 'advanced-gutenberg' )\r\n                                                : ''\r\n                                            }\r\n                                            checked={ currentControlKey( advgbBlockControls, 'device_width', 'enabled' ) }\r\n                                            onChange={ () => this.changeControlKey( 'device_width', 'enabled' ) }\r\n                                        />\r\n                                        { currentControlKey( advgbBlockControls, 'device_width', 'enabled' ) && (\r\n                                            <Fragment>\r\n                                                <TextControl\r\n                                                    type=\"number\"\r\n                                                    label={ __( 'Minimum width (px)', 'advanced-gutenberg' ) }\r\n                                                    value={ currentControlKey( advgbBlockControls, 'device_width', 'min_width' ) || '' }\r\n                                                    onChange={ ( value ) => this.changeControlKey( 'device_width', 'min_width', value ) }\r\n                                                    placeholder={ __( 'No minimum', 'advanced-gutenberg' ) }\r\n                                                />\r\n                                                <TextControl\r\n                                                    type=\"number\"\r\n                                                    label={ __( 'Maximum width (px)', 'advanced-gutenberg' ) }\r\n                                                    value={ currentControlKey( advgbBlockControls, 'device_width', 'max_width' ) || '' }\r\n                                                    onChange={ ( value ) => this.changeControlKey( 'device_width', 'max_width', value ) }\r\n                                                    placeholder={ __( 'No maximum', 'advanced-gutenberg' ) }\r\n                                                />\r\n                                            </Fragment>\r\n                                        ) }\r\n                                    </Fragment>\r\n                                ) }\r\n                                { ! this.isPost() && ( // Disabled in post edit\r\n                                    <Fragment>\r\n                                        { isControlEnabled( advgb_block_controls_vars.controls.archive ) && (\r\n                                        <Fragment>\r\n                                            <ToggleControl\r\n                                                label={ __( 'Term archives', 'advanced-gutenberg' ) }\r\n                                                help={ currentControlKey( advgbBlockControls, 'archive', 'enabled' )\r\n                                                    ? __( 'Choose on which taxonomies and terms archive pages your blocks can be displayed.', 'advanced-gutenberg' )\r\n                                                    : ''\r\n                                                }\r\n                                                checked={ currentControlKey( advgbBlockControls, 'archive', 'enabled' ) }\r\n                                                onChange={ () => this.changeControlKey( 'archive', 'enabled' ) }\r\n                                            />\r\n                                            { currentControlKey( advgbBlockControls, 'archive', 'enabled' ) && (\r\n                                                <Fragment>\r\n                                                    <div className=\"advgb-revert-mb--disabled\" style={{ marginBottom: 20 }}>\r\n                                                        <SelectControl\r\n                                                            value={\r\n                                                                currentControlKey( advgbBlockControls, 'archive', 'approach' )\r\n                                                            }\r\n                                                            options={ [\r\n                                                                {\r\n                                                                    value: 'include',\r\n                                                                    label: __( 'Show for selected terms', 'advanced-gutenberg' )\r\n                                                                },\r\n                                                                {\r\n                                                                    value: 'exclude',\r\n                                                                    label: __( 'Hide for selected terms', 'advanced-gutenberg' )\r\n                                                                }\r\n                                                            ] }\r\n                                                            onChange={ ( value ) => this.changeControlKey( 'archive', 'approach', value ) }\r\n                                                        />\r\n                                                    </div>\r\n                                                    <FormTokenField\r\n                                                        multiple\r\n                                                        label={ __( 'Select taxonomies', 'advanced-gutenberg' ) }\r\n                                                        placeholder={ __( 'Search taxonomies', 'advanced-gutenberg' ) }\r\n                                                        suggestions={ getOptionSuggestions( this.state.taxModOptions || this.getTaxonomies() ) }\r\n                                                        maxSuggestions={ 10 }\r\n                                                        value={\r\n                                                            getOptionTitles(\r\n                                                                this.currentArchiveControl( 'taxonomies' ),\r\n                                                                this.state.taxModOptions || this.getTaxonomies()\r\n                                                            )\r\n                                                        }\r\n                                                        onChange={ ( value ) => {\r\n                                                            this.changeArchiveControl(\r\n                                                                'taxonomies',\r\n                                                                getOptionSlugs( value, this.state.taxModOptions || this.getTaxonomies() )\r\n                                                            );\r\n                                                        } }\r\n                                                        __experimentalExpandOnFocus\r\n                                                    />\r\n                                                    { ( currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ).length > 0 ) && (\r\n                                                        <Fragment>\r\n                                                            <FormTokenField\r\n                                                                multiple\r\n                                                                label={ __( 'Filter terms', 'advanced-gutenberg' ) }\r\n                                                                placeholder={ __( 'Search terms', 'advanced-gutenberg' ) }\r\n                                                                suggestions={ getOptionSuggestions(\r\n                                                                    this.state.termOptions\r\n                                                                ) }\r\n                                                                maxSuggestions={ 10 }\r\n                                                                value={\r\n                                                                    getOptionTitles(\r\n                                                                        this.currentArchiveControl( 'terms' ),\r\n                                                                        this.state.termOptions\r\n                                                                    )\r\n                                                                }\r\n                                                                onChange={ ( value ) => {\r\n                                                                    this.changeArchiveControl(\r\n                                                                        'terms',\r\n                                                                        getOptionSlugs(\r\n                                                                            value,\r\n                                                                            this.state.termOptions\r\n                                                                        )\r\n                                                                    );\r\n                                                                    this.setState( {\r\n                                                                        updateTaxLabels: true\r\n                                                                    } );\r\n                                                                } }\r\n                                                                onInputChange={ ( value ) => {\r\n                                                                    this.setState( {\r\n                                                                        searchTermWord: value\r\n                                                                    } );\r\n                                                                } }\r\n                                                                __experimentalShowHowTo={ false }\r\n                                                            />\r\n                                                            <div className=\"advgb-revert-mb--disabled components-form-token-field__help\"\r\n                                                                style={{ marginBottom: 20 }}>\r\n                                                                { __(\r\n                                                                    'Use this filter to apply only to some terms.',\r\n                                                                    'advanced-gutenberg'\r\n                                                                ) }\r\n                                                            </div>\r\n                                                        </Fragment>\r\n                                                    ) }\r\n                                                </Fragment>\r\n                                            ) }\r\n                                        </Fragment>\r\n                                        ) }\r\n\r\n                                        { isControlEnabled( advgb_block_controls_vars.controls.page ) && (\r\n                                        <Fragment>\r\n                                            <ToggleControl\r\n                                                label={ __( 'Pages', 'advanced-gutenberg' ) }\r\n                                                help={ currentControlKey( advgbBlockControls, 'page', 'enabled' )\r\n                                                    ? __( 'Choose in which pages this block can be displayed.', 'advanced-gutenberg' )\r\n                                                    : ''\r\n                                                }\r\n                                                checked={ currentControlKey( advgbBlockControls, 'page', 'enabled' ) }\r\n                                                onChange={ () => this.changeControlKey( 'page', 'enabled' ) }\r\n                                            />\r\n                                            { currentControlKey( advgbBlockControls, 'page', 'enabled' ) && (\r\n                                                <Fragment>\r\n                                                    <div className=\"advgb-revert-mb\">\r\n                                                        <SelectControl\r\n                                                            value={\r\n                                                                currentControlKey( advgbBlockControls, 'page', 'approach' )\r\n                                                            }\r\n                                                            options={ [\r\n                                                                {\r\n                                                                    value: 'include',\r\n                                                                    label: __( 'Show on the selected pages', 'advanced-gutenberg' )\r\n                                                                },\r\n                                                                {\r\n                                                                    value: 'exclude',\r\n                                                                    label: __( 'Hide on the selected pages', 'advanced-gutenberg' )\r\n                                                                }\r\n                                                            ] }\r\n                                                            onChange={ ( value ) => this.changeControlKey( 'page', 'approach', value ) }\r\n                                                        />\r\n                                                    </div>\r\n                                                    { ( currentControlKey( advgbBlockControls, 'page', 'approach' ) === 'include' ||\r\n                                                        currentControlKey( advgbBlockControls, 'page', 'approach' ) === 'exclude'\r\n                                                    ) && (\r\n                                                        <FormTokenField\r\n                                                            multiple\r\n                                                            label={ __( 'Select pages', 'advanced-gutenberg' ) }\r\n                                                            placeholder={ __( 'Search', 'advanced-gutenberg' ) }\r\n                                                            suggestions={ getOptionSuggestions( this.getPages() ) }\r\n                                                            maxSuggestions={ 10 }\r\n                                                            value={\r\n                                                                getOptionTitles(\r\n                                                                    !! currentControlKey( advgbBlockControls, 'page', 'pages' )\r\n                                                                        ? currentControlKey( advgbBlockControls, 'page', 'pages' )\r\n                                                                        : [],\r\n                                                                    this.getPages()\r\n                                                                )\r\n                                                            }\r\n                                                            onChange={ ( value ) => {\r\n                                                                this.changeControlKey( 'page', 'pages', getOptionSlugs( value, this.getPages() ) )\r\n                                                            } }\r\n                                                            __experimentalExpandOnFocus\r\n                                                        />\r\n                                                    ) }\r\n                                                </Fragment>\r\n                                            ) }\r\n                                        </Fragment>\r\n                                        ) }\r\n                                    </Fragment>\r\n                                ) }\r\n                            </PanelBody>\r\n                        </InspectorControls>,\r\n                        <BlockEdit key=\"block-edit-advgb-dates\" {...this.props} />,\r\n                    ] )\r\n            }\r\n        }\r\n    }, 'withEditControls' );\r\n\r\n    // Add option to add controls for supported blocks\r\n    addFilter( 'editor.BlockEdit', 'advgb/addBlockControls', withEditControls );\r\n\r\n    const withAttributes = createHigherOrderComponent( ( BlockListBlock ) => {\r\n        return ( props ) => {\r\n            if ( ( !NON_SUPPORTED_BLOCKS.includes( props.name ) ) && hasBlockSupport( props.name, 'advgb/blockControls', true ) && isAnyControlEnabledGlobal() ) {\r\n                const { advgbBlockControls } = props.attributes;\r\n                const advgbBcClass = props.isSelected === false\r\n                    && isAnyControlEnabledBlock( advgbBlockControls )\r\n                        ? 'advgb-bc-editor-preview' : '';\r\n\r\n                return <BlockListBlock { ...props } className={ classnames( props.className, advgbBcClass ) } advgbBlockControls={ `${ advgbBlockControls }` } />;\r\n            }\r\n\r\n            return <BlockListBlock { ...props } />;\r\n        };\r\n    }, 'withAttributes' );\r\n\r\n    // Apply attributes and CSS classes on backend\r\n    addFilter( 'editor.BlockListBlock', 'advgb/loadBackendBlockControls', withAttributes );\r\n\r\n})( wp.i18n, wp.hooks, wp.blocks, wp.blockEditor, wp.components, wp.compose, wp.element );\r\n"],"names":["module","exports","to12Hour","hour","meridiem","meridian","to24Hour","time","hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","appendClass","parseValue","Array","isArray","apply","toString","Object","prototype","includes","key","call","value","newClass","default","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","obj","prop","_wp$components","wp","components","ButtonGroup","Button","DateTimePicker","CheckboxControl","TextControl","Popover","Tooltip","SelectControl","Icon","_wp$element","element","Component","Fragment","useState","_wp$i18n","i18n","__","_x","applyFilters","hooks","AdvDateTimeControl","props","_useState2","_slicedToArray","popupState","setPopupState","togglePopup","buttonLabel","dateLabel","date","onChangeDate","onDateClear","onInvalidDate","placement","offset","React","createElement","className","isLink","icon","onClick","text","moment","format","onClose","bind","resize","currentDate","onChange","is12Hour","isInvalidDate","AdvDaysControl","allDays","slug","label","days","onChangeDays","_useState4","selectedDays","setSelectedDays","isDaySelected","some","el","map","day","checked","updatedDays","filter","findDay","find","concat","_toConsumableArray","uniqueDays","Set","onChangeDay","defaultProps","AdvTimeClass","_Component","_this","_classCallCheck","_callSuper","state","onChangeTime","currentTime","hours","minutes","onInit","_inherits","_this$state","this","setState","split","parseInt","prevProps","prevState","_this$props","_this$state2","prevHours","prevMinutes","prevMeridian","savedTime","appendZero","hourConvert","isNaN","res","_this2","_this$state3","type","event","Math","max","min","Number","target","onKeyDown","placeholder","variant","disabled","onTimeClear","AdvTimeControl","AdvTimezoneControl","defaultTimezone","style","marginTop","marginBottom","float","marginRight","href","class","options","getOptionSuggestions","item","title","getOptionTitles","slugs","field_value","option_slug","find_option","getOptionSlugs","slugs_array","option_title","matching_slug","push","wpI18n","wpHooks","wpBlocks","wpBlockEditor","wpComponents","wpCompose","wpElement","blockEditor","editor","addFilter","sprintf","hasBlockSupport","_wpBlockEditor","InspectorControls","ToggleControl","BlockControls","PanelBody","Notice","FormTokenField","createHigherOrderComponent","RadioControl","advgbBlocks","block_controls","NON_SUPPORTED_BLOCKS","getGlobalControls","advgb_block_controls_vars","controls","keys","isControlEnabled","control","isAnyControlEnabledBlock","controlAttrs","globalControls","counter","blockControls","forEach","currentControlKey","isAnyControlEnabledGlobal","itemIndex","findIndex","non_supported","settings","name","attributes","_extends","advgbBlockControls","items","withEditControls","BlockEdit","BlockControlsEdit","taxModOptions","termOptions","searchTermWord","initArchive","updateTaxLabels","isPost","taxonomies","terms","getTaxonomies","tax","allTaxonomies","term","user_roles","_this3","page","setAttributes","scheduleControl","enabled","dateFrom","dateTo","recurring","userRoleControl","roles","approach","archiveControl","pageControl","pages","deviceTypeControl","devices","deviceWidthControl","min_width","max_width","controlsAdded","controlExists","newArray","_objectSpread","_defineProperty","topic","_this4","_this$props2","taxArray","controlIndex","taxIndex","all","currentArchiveControl","option","_this$props3","result","_this5","currentTerms","changeControlKey","modifyTaxLabels","_this6","apiFetch","path","url","addQueryArgs","ids","then","list","singular","index","_this7","search","from","data","select","getCurrentPostId","timezone","replace","iniTaxLabels","_this$props4","isSelected","prevBlockControls","prevTermWord","archive","initArchiveControl","searchTerms","taxonomiesChanged","_this8","_this$props5","initialOpen","schedule","help","newDate","thisDate","Date","getTime","setHours","fromDate","status","isDismissible","display","newTime","getTimezoneLabel","getTimezoneSlug","onChangeTimezone","user_role","multiple","suggestions","getUserRoles","maxSuggestions","__experimentalExpandOnFocus","device_type","newDevices","device_width","changeArchiveControl","onInputChange","__experimentalShowHowTo","getPages","BlockListBlock","advgbBcClass","classnames","blocks","compose"],"sourceRoot":""}